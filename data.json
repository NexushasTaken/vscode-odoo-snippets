{
	"file controller": {
		"prefix": "file controller",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#    License, author and contributors information in:                         #\n#    __manifest__.py file at the root folder of this module.                   #\n###############################################################################\n\nfrom odoo.http import route, request, Controller, _\n\n${0}\n",
		"description": "Odoo Python web controller file",
		"scope": "source.python"
	},
	"controller": {
		"prefix": "controller",
		"body": "\nclass ${1:ControllerName}(Controller):\n    \"\"\" ${2:The summary line for a class docstring should fit on one line.}\n\n        Routes:\n          /${3:some_url}: ${4:url description}\n    \"\"\"\n\n    @route('/${3}', type='${5:http}', auth='${6:none}')\n    def ${3/((^[A-Z])|([^a-zA-Z]))/(?2:\\l$2)(?3:\\_)/g}(self${7:, **kw}):\n\n        pass${0}\n",
		"description": "Controller",
		"scope": "source.python"
	},
	"base.action.rule": {
		"prefix": "base.action.rule",
		"body": "\n<record id=\"${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"base.action.rule\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"active\" eval=\"${2:True}\" />\n    <field name=\"sequence\" eval=\"${3:0}\" />\n    <field name=\"server_action_ids\" eval=\"[(4, ref('${4:ir.actions.server}'))]\" />\n    <field name=\"model_id\" ref=\"${5:ir.model}\" />\n    <field name=\"kind\">${6:on_create_or_write}</field>\n    <field name=\"trg_date_id\" ref=\"${7:ir.model.fields}\" />\n    <field name=\"trg_date_range\" eval=\"${8:0}\" />\n    <field name=\"trg_date_range_type\">${9:day}</field>${11:\n    <field name=\"trg_date_calendar_id\" ref=\"${10:resource.calendar}\" />}${13:\n    <field name=\"filter_id\" ref=\"${12:ir.filters}\" />}${15:\n    <field name=\"filter_pre_id\" ref=\"${14:ir.filters}\" />}${17:\n    <field name=\"act_user_id\" ref=\"${16:base.user_root}\" />}${19:\n    <field name=\"act_followers\" eval=\"[(4, ref('${18:res.partner}'))]\" />}\n</record>${0}\n",
		"description": "Common record definition for base.action.rule",
		"scope": "text.xml"
	},
	"ir.actions.act_window": {
		"prefix": "ir.actions.act_window",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_act_window\" model=\"ir.actions.act_window\">\n    <field name=\"type\">ir.actions.act_window</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"res_model\">${2:model.name}</field>\n    <field name=\"view_mode\">${3:tree,form}</field>\n    <field name=\"view_type\">${4:form}</field>\n    <field name=\"target\">${5:current}</field>${7:\n    <field name=\"domain\">[${6:}]</field>}${9:\n    <field name=\"context\">${8:\\{\\}}</field>}${11:\n    <field name=\"search_view_id\" ref=\"${10:ir.ui.view}\" />}\n</record>${0}\n",
		"description": "Common record definition for ir.actions.act_window",
		"scope": "text.xml"
	},
	"ir.actions.act_window.view": {
		"prefix": "ir.actions.act_window.view",
		"body": "\n<record id=\"action_${1/[^a-zA-Z]+/\\_/g}_${2/[^a-zA-Z]+/\\_/g}\" model=\"ir.actions.act_window.view\">\n    <field name=\"act_window_id\" ref=\"${1:ir.actions.act_window}\" />\n    <field name=\"view_id\" ref=\"${2:ir.ui.view}\" />\n    <field name=\"view_mode\">${3:tree}</field>\n    <field name=\"sequence\" eval=\"${4:1}\" />\n    <field name=\"multi\" eval=\"${5:False}\" />\n</record>\n",
		"description": "Common record definition for ir.actions.act_window.view",
		"scope": "text.xml"
	},
	"ir.actions.report.xml": {
		"prefix": "ir.actions.report.xml",
		"body": "\n<record id=\"action_report_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.actions.report.xml\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model\">${2:model.name}</field>\n    <field name=\"report_type\">${3:qweb-pdf}</field>\n    <field name=\"report_name\">${4:out_filename}</field>\n    <field name=\"attachment_use\" eval=\"${5:True}\" />\n    <field name=\"attachment\">${6:(object.name+'.pdf')}</field>\n    <field name=\"paperformat_id\" ref=\"${7:report.paperformat_euro}\" />${9:\n    <field name=\"help\">${8:Something about ${1}}</field>}\n</record>${0}\n",
		"description": "Common record definition for ir.actions.report.xml",
		"scope": "text.xml"
	},
	"ir.actions.server": {
		"prefix": "ir.actions.server",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_server\" model=\"ir.actions.server\">\n    <field name=\"type\">ir.actions.server</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:ir.model}\" />\n    <field name=\"condition\" eval=\"${3:True}\" />\n    <field name=\"sequence\" eval=\"${4:5}\" />\n    <field name=\"context\" eval=\"${5:\\{\\}}\" />\n    <field name=\"action_id\" ref=\"${6:ir.actions.actions}\" />\n</record>${0}\n",
		"description": "Common record definition for ir.actions.server, invoking a client action",
		"scope": "text.xml"
	},
	"ir.actions.server1": {
		"prefix": "ir.actions.server",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_server\" model=\"ir.actions.server\">\n    <field name=\"type\">ir.actions.server</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:ir.model}\" />\n    <field name=\"condition\" eval=\"${3:True}\" />\n    <field name=\"sequence\" eval=\"${4:5}\" />\n    <field name=\"context\" eval=\"${5:\\{\\}}\" />\n    <field name=\"code\">${6:action = self.browse(cr, uid, 1, context=context)}</field>\n</record>${0}\n",
		"description": "Common record definition for ir.actions.server, running Python code",
		"scope": "text.xml"
	},
	"ir.actions.server2": {
		"prefix": "ir.actions.server",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_server\" model=\"ir.actions.server\">\n    <field name=\"type\">ir.actions.server</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:ir.model}\" />\n    <field name=\"condition\" eval=\"${3:True}\" />\n    <field name=\"sequence\" eval=\"${4:5}\" />\n    <field name=\"context\" eval=\"${5:\\{\\}}\" />\n    <field name=\"child_ids\" eval=\"[(6, ref('${6:ir.actions.server}'))]\" />\n</record>${0}\n",
		"description": "Common record definition for ir.actions.server, executing multiple actions",
		"scope": "text.xml"
	},
	"ir.actions.server3": {
		"prefix": "ir.actions.server",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_server\" model=\"ir.actions.server\">\n    <field name=\"type\">ir.actions.server</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:ir.model}\" />\n    <field name=\"condition\" eval=\"${3:True}\" />\n    <field name=\"sequence\" eval=\"${4:5}\" />\n    <field name=\"context\" eval=\"${5:\\{\\}}\" />\n    <field name=\"use_create\">${6:new}</field>${8:\n    <field name=\"crud_model_id\" ref=\"${7:ir.model}\" />}${10:\n    <field name=\"ref_object\">${9:reference}</field>}${12:\n    <field name=\"fields_lines\" eval=\"[(4, ref('${11:ir.server.object.lines}'))]\" />}${14:\n    <field name=\"link_new_record\" eval=\"${13:False}\" />}${16:\n    <field name=\"link_field_id\" ref=\"${15:ir.model.fields}\" />}\n</record>${0}\n",
		"description": "Common record definition for ir.actions.server, creating objects",
		"scope": "text.xml"
	},
	"ir.actions.server4": {
		"prefix": "ir.actions.server",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_server\" model=\"ir.actions.server\">\n    <field name=\"type\">ir.actions.server</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:ir.model}\" />\n    <field name=\"condition\" eval=\"${3:True}\" />\n    <field name=\"sequence\" eval=\"${4:5}\" />\n    <field name=\"context\" eval=\"${5:\\{\\}}\" />\n    <field name=\"use_write\">${6:current}</field>${8:\n    <field name=\"crud_model_id\" ref=\"${7:ir.model}\" />}${10:\n    <field name=\"ref_object\">${9:reference}</field>}${12:\n    <field name=\"fields_lines\" eval=\"[(4, ref('${11:ir.server.object.lines}'))]\" />}${14:\n    <field name=\"write_expression\">${13:char}</field>}\n</record>${0}\n",
		"description": "Common record definition for ir.actions.server, updating objects",
		"scope": "text.xml"
	},
	"ir.actions.server5": {
		"prefix": "ir.actions.server",
		"body": "\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_server\" model=\"ir.actions.server\">\n    <field name=\"type\">ir.actions.server</field>\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:ir.model}\" />\n    <field name=\"condition\" eval=\"${3:True}\" />\n    <field name=\"sequence\" eval=\"${4:5}\" />\n    <field name=\"context\" eval=\"${5:\\{\\}}\" />\n    <field name=\"wkf_transition_id\" ref=\"${6:workflow.transition}\" />\n    <field name=\"use_relational_model\">${7:base}</field>${9:\n    <field name=\"wkf_model_id\" ref=\"${8:ir.model}\" />}${11:\n    <field name=\"wkf_field_id\" ref=\"${10:ir.model.fields}\" />}\n</record>${0}\n",
		"description": "Common record definition for ir.actions.server, triggering",
		"scope": "text.xml"
	},
	"ir.actions.todo": {
		"prefix": "ir.actions.todo",
		"body": "\n<record id=\"action_todo_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.actions.todo\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"type\">${2:manual}</field>\n    <field name=\"state\">${3:open}</field>\n    <field name=\"sequence\" eval=\"${4:10}\" />\n    <field name=\"action_id\" ref=\"${5:ir.actions.actions}\" />${7:\n    <field name=\"note\">${6:Something about ${1}}</field>}\n</record>${0}\n",
		"description": "",
		"scope": "text.xml"
	},
	"ir.config_parameter": {
		"prefix": "ir.config_parameter",
		"body": "\n<record id=\"${1/[^A-Za-z]/\\_/g}\" model=\"ir.config_parameter\">\n    <field name=\"key\">${1:char}</field>\n    <field name=\"value\">${2:text}</field>${4:\n    <field name=\"group_ids\" eval=\"[(4, ref('${3:res.groups}'))]\" />}\n</record>${0}\n",
		"description": "Common ir.config_parameter record definition",
		"scope": "text.xml"
	},
	"ir.model.data": {
		"prefix": "ir.model.data",
		"body": "\n<record id=\"${3/(\\.+)/_/g}_${1/(\\.+)/_/g}\" model=\"ir.model.data\">\n    <field name=\"name\">${1:resource_external_id}</field>\n    <field name=\"model\">${2:model.name}</field>\n    <field name=\"module\">${3:module_name}</field>\n    <field name=\"date_init\" eval=\"${4:time.strftime('%Y-%m-%d %H:%M:%S')}\" />\n    <field name=\"date_update\" eval=\"${5:time.strftime('%Y-%m-%d %H:%M:%S')}\" />\n    <field name=\"res_id\" eval=\"${6:1}\" />\n    <field name=\"noupdate\" eval=\"${7:True}\" />\n</record>${0}\n",
		"description": "Common record definition for ir.model.data",
		"scope": "text.xml"
	},
	"ir.model": {
		"prefix": "ir.model",
		"body": "\n<record id=\"${1/(\\.+)/_/g}_${2/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.model\">\n    <field name=\"model\">${1:model_name}</field>\n    <field name=\"name\">${2:Human readable name}</field>\n    <field name=\"state\">${3:Base | Manual}</field>\n    <field name=\"info\">${4:Description}</field>\n</record>${0}\n",
		"description": "Common record definition for ir.model",
		"scope": "text.xml"
	},
	"ir.module.category": {
		"prefix": "ir.module.category",
		"body": "\n<record id=\"module_category_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.module.category\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"sequence\" eval=\"${2:10}\" />\n    <field name=\"visible\" eval=\"${3:True}\" />\n    <field name=\"description\">${4:${1} category}</field>${6:\n    <field name=\"parent_id\" ref=\"${5:ir.module.category}\" />}\n</record>${0}\n",
		"description": "XML ir.model.category record",
		"scope": "text.xml"
	},
	"ir.values": {
		"prefix": "ir.values",
		"body": "\n<record id=\"${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_values\" model=\"ir.values\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${2:module.model_external_id}\" />\n    <field name=\"model\">${2/((^[^.]*.?model_)|([_]+))/(?2:)(?3:\\.)/g}</field>\n    <field name=\"value\" eval=\"${4:'ir.actions.act_window,' +str(ref('${3:action_external_id}'))}\" />\n    <field name=\"key\">${5:action}</field>\n    <field name=\"key2\">${6:tree_but_open}</field>${8:\n    <field name=\"action_id\" ref=\"${7:ir.actions.actions}\" />}${10:\n    <field name=\"res_id\" eval=\"${9:1}\" />}${12:\n    <field name=\"company_id\" ref=\"${11:res.company}\" />}${14:\n    <field name=\"user_id\" ref=\"${13:res.users}\" />}\n</record>${0}\n",
		"description": "Common record definition for ir.values",
		"scope": "text.xml"
	},
	"email.template": {
		"prefix": "email.template",
		"body": "\n<record id=\"email_template_${12:${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}}\" model=\"email.template\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"subject\">${2:$1}</field>\n    <field name=\"email_from\">${3:$\\{object.company_id.name\\} <$\\{(object.company_id.email or user.email)|safe\\}>}</field>\n    <field name=\"email_to\">${4:$\\{object.name|safe\\} <$\\{object.email|safe\\}>}</field>\n    <field name=\"email_cc\">${5}</field>\n    <field name=\"reply_to\">${6}</field>\n    <field name=\"user_signature\" eval=\"${7:False}\" />\n    <field name=\"lang\">${8:$\\{object.lang\\}}</field>\n    <field name=\"auto_delete\" eval=\"${9:True}\" />\n    <field name=\"model_id\" ref=\"${10:ir.model}\" />\n    <field name=\"attachment_ids\" eval=\"[(4, ref('${11:ir.attachment}'))]\" />\n    <field name=\"body_html\"><![CDATA[\n        ${12:<p>To whom it may concern:</p>}\n]]${-1}></field>\n</record>${0}\n",
		"description": "Common record definition for email.template",
		"scope": "text.xml"
	},
	"function": {
		"prefix": "function",
		"body": "\n<function eval=\"[(${3:field}, '=', ${4:value})]\" model=\"${1:model.name}\"  name=\"${2:mothod}\">\n    <function eval=\"[(${3:field}, '=', ${4:value})]\" model=\"${1:model.name}\"  name=\"search\">\n    <value eval=\"{'${3:field}': ${4:value}}\"/>\n</function>\n",
		"description": "",
		"scope": "text.xml"
	},
	"file xml": {
		"prefix": "file xml",
		"body": "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<odoo>\n    <data noupdate=\"${1:0}\">\n\n        ${0}\n\n    </data>\n</odoo>\n",
		"description": "Common base XML structure to be used in Odoo module data files",
		"scope": "text.xml"
	},
	"product.product": {
		"prefix": "product.product",
		"body": "\n<record id=\"${18:${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_product_product}\" model=\"product.product\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"description\">${2:Description}</field>\n    <field name=\"description_purchase\">${3:${2:Description}}</field>\n    <field name=\"description_sale\">${4:${2:Description}}</field>\n    <field name=\"categ_id\" ref=\"${5:product.category}\"/>\n    <field name=\"standard_price\">${6:0.0}</field>\n    <field name=\"list_price\">${7:0.0}</field>\n    <field name=\"type\">${8:consu|service}</field>\n    <field name=\"uom_id\" ref=\"${9:product.uom}\"/>\n    <field name=\"uom_po_id\" ref=\"${10:product.uom}\"/>\n    <field name=\"taxes_id\" eval=\"[(4, ref('${11:account.tax}'))]\" />\n${13:    <field name=\"image\" type=\"base64\" file=\"${12:module_name/static/img/file_name.png}\"/>\n}${15:    <field name=\"default_code\">${14:PRODUCT-CODE}</field>\n}${17:    <field name=\"ean13\">${16:0000000000000}</field>\n}</record>${0}\n",
		"description": "XML product.product record",
		"scope": "text.xml"
	},
	"product.template": {
		"prefix": "product.template",
		"body": "\n<record id=\"${18:${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_product_template}\" model=\"product.template\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"description\">${2:Description}</field>\n    <field name=\"description_purchase\">${3:${2:Description}}</field>\n    <field name=\"description_sale\">${4:${2:Description}}</field>\n    <field name=\"categ_id\" ref=\"${5:product.category}\"/>\n    <field name=\"standard_price\">${6:0.0}</field>\n    <field name=\"list_price\">${7:0.0}</field>\n    <field name=\"type\">${8:consu|service}</field>\n    <field name=\"uom_id\" ref=\"${9:product.uom}\"/>\n    <field name=\"uom_po_id\" ref=\"${10:product.uom}\"/>\n    <field name=\"taxes_id\" eval=\"[(4, ref('${11:account.tax}'))]\" />\n${13:    <field name=\"image\" type=\"base64\" file=\"${12:module_name/static/img/file_name.png}\"/>\n}${15:    <field name=\"default_code\">${14:PRODUCT-CODE}</field>\n}${17:    <field name=\"ean13\">${16:0000000000000}</field>\n}</record>${0}\n",
		"description": "XML product.template record",
		"scope": "text.xml"
	},
	"record": {
		"prefix": "record",
		"body": "\n<record id=\"${2:${1/(\\.+)/\\_/g}}\" model=\"${1:model.name}\">\n    ${0}\n</record>\n",
		"description": "",
		"scope": "text.xml"
	},
	"api_constraints": {
		"prefix": "api_constraints",
		"body": "\n@api.one\n@api.constrains('${1}')\ndef _check_${1}(self):\n    ${0}\n",
		"description": "Model Python contraints",
		"scope": "source.python"
	},
	"compute": {
		"prefix": "compute",
		"body": "\ncompute='_compute_${1:field}'${0}\n",
		"description": "Field attribute: compute, lambda function",
		"scope": "source.python"
	},
	"default": {
		"prefix": "default",
		"body": "\ndefault=lambda self: self._default_${1:field}()${0}\n",
		"description": "Field attribute: search, lambda function",
		"scope": "source.python"
	},
	"default company": {
		"prefix": "default company",
		"body": "\ndefault=lambda self: self.env['res.company']._company_default_get(${1:'res.users'})${0}\n",
		"description": "Field attribute: default company",
		"scope": "source.python"
	},
	"default_model": {
		"prefix": "default_model",
		"body": "\ndefault_model='${1:model.name}'${0}\n",
		"description": "Field attribute: default_model ",
		"scope": "source.python"
	},
	"default user": {
		"prefix": "default user",
		"body": "\ndefault=lambda self: self.env.user${0}\n",
		"description": "Field attribute: default user",
		"scope": "source.python"
	},
	"inverse": {
		"prefix": "inverse",
		"body": "\ninverse=lambda self: self._inverse_${1:field}()${0}\n",
		"description": "Field attribute: inverse, lambda function",
		"scope": "source.python"
	},
	"selection_add": {
		"prefix": "selection_add",
		"body": "\nselection_add=[('${1:draft}', ${1}) ${0}]\n",
		"description": "Field attribute: selection_add ",
		"scope": "source.python"
	},
	"track_visibility": {
		"prefix": "track_visibility",
		"body": "\ntrack_visibility='${1:onchange}'${0}\n",
		"description": "Field attribute: track_visibility",
		"scope": "source.python"
	},
	"file model": {
		"prefix": "file model",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#    License, author and contributors information in:                         #\n#    __manifest__.py file at the root folder of this module.                   #\n###############################################################################\n\nfrom odoo import models, fields, api, _\n\n${0}\n",
		"description": "Odoo Python module file",
		"scope": "source.python"
	},
	"Model": {
		"prefix": "Model",
		"body": "\nclass ${1:ModelName}(models.TransientModel):\n    \"\"\" ${2:The summary line for a class docstring should fit on one line.}\n\n    \"\"\"\n\n    _name = '${3:${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}}'\n    _description = u'${4:${1/((^[A-Z])|([A-Z]))/(?2:\\u$2)(?3:\\ \\l$3)/g}}'\n    _inherit = '${4:ModelName}'\n\n    ${0}\n",
		"description": "Odoo transient model class",
		"scope": "source.python"
	},
	"Model1": {
		"prefix": "Model",
		"body": "\nclass ${1:ModelName}(models.Model):\n    \"\"\" ${2:The summary line for a class docstring should fit on one line.}\n\n    Fields:\n      name (Char): Human readable name which will identify each record.\n\n    \"\"\"\n\n    _name = '${3:${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}}'\n    _description = u'${4:${1/((^[A-Z])|([A-Z]))/(?2:\\u$2)(?3:\\ \\l$3)/g}}'\n\n    _rec_name = 'name'\n    _order = 'name ASC'\n\n    name = fields.Char(\n        string=u'Name',\n        required=True,\n        readonly=False,\n        index=True,\n        default=None,\n        help=False,\n        size=50,\n        translate=True\n    )${0}\n",
		"description": "Odoo generic model class",
		"scope": "source.python"
	},
	"fields.Binary": {
		"prefix": "fields.Binary",
		"body": "\n${1:field_name} = fields.Binary(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Binary",
		"scope": "source.python"
	},
	"fields.Boolean": {
		"prefix": "fields.Boolean",
		"body": "\n${1:field_name} = fields.Boolean(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:False},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Boolean",
		"scope": "source.python"
	},
	"fields.Char": {
		"prefix": "fields.Char",
		"body": "\n${1:field_name} = fields.Char(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    size=${8:50},\n    translate=${9:True}\n)${0}\n",
		"description": "Common definition for field type Char",
		"scope": "source.python"
	},
	"fields.Date": {
		"prefix": "fields.Date",
		"body": "\n${1:field_name} = fields.Date(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:fields.Date.context_today},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Date",
		"scope": "source.python"
	},
	"fields.Datetime": {
		"prefix": "fields.Datetime",
		"body": "\n${1:field_name} = fields.Datetime(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:fields.Datetime.now},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Datetime",
		"scope": "source.python"
	},
	"fields.Float": {
		"prefix": "fields.Float",
		"body": "\n${1:field_name} = fields.Float(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0.0},\n    digits=(${7:16}, ${8:2}),\n    help=${9:False}\n)${0}\n",
		"description": "Common definition for field type Float",
		"scope": "source.python"
	},
	"fields.Html": {
		"prefix": "fields.Html",
		"body": "\n${1:field_name} = fields.Html(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type HTML",
		"scope": "source.python"
	},
	"fields.Integer": {
		"prefix": "fields.Integer",
		"body": "\n${1:field_name} = fields.Integer(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Integer",
		"scope": "source.python"
	},
	"fields.Many2many": {
		"prefix": "fields.Many2many",
		"body": "\n${1:field_name} = fields.Many2many(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    comodel_name='${8:model.name}',\n    relation='${9:${8/\\./_/g}_this_model_rel}',\n    column1='${10:${8/\\./_/g}_id}',\n    column2='${11:this_model_id}',\n    domain=[${12}],\n    context=\\{${13}\\},\n    limit=${14:None}\n)${0}\n",
		"description": "Common definition for field type Many2many",
		"scope": "source.python"
	},
	"fields.Many2one": {
		"prefix": "fields.Many2one",
		"body": "\n${1:field_name} = fields.Many2one(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    comodel_name='${8:model.name}',\n    domain=[${9}],\n    context=\\{${10}\\},\n    ondelete='${11:set null}',\n    auto_join=${12:False}\n)${0}\n",
		"description": "Common definition for field type Many2one",
		"scope": "source.python"
	},
	"fields.One2many": {
		"prefix": "fields.One2many",
		"body": "\n${1:field_name} = fields.One2many(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    comodel_name='${8:model.name}',\n    inverse_name='${9:inverse_field}',\n    domain=[${10}],\n    context=\\{${11}\\},\n    auto_join=${12:False},\n    limit=${13:None}\n)${0}\n",
		"description": "Common definition for field type One2Many",
		"scope": "source.python"
	},
	"fields.Reference": {
		"prefix": "fields.Reference",
		"body": "\n${1:field_name} = fields.Reference(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0},\n    help=${7:False},\n    selection=[('${8:model.name}', '${9:String}'),('${10:model.name}', '${11:String}')]\n)${0}\n",
		"description": "Common definition for field type Reference",
		"scope": "source.python"
	},
	"fields.Selection": {
		"prefix": "fields.Selection",
		"body": "\n${1:field_name} = fields.Selection(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:False},\n    help=${7:False},\n    selection=[('${8:valor1}', '${9:${8/(.)(.+)/\\u$1$2/g}}'), ('${10:valor2}', '${11:${10/(.)(.+)/\\u$1$2/g}}')]\n)${0}\n",
		"description": "Common definition for field type Seleccion",
		"scope": "source.python"
	},
	"fields.Text": {
		"prefix": "fields.Text",
		"body": "\n${1:field_name} = fields.Text(\n    string=u'${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    translate=${8:True}\n)${0}\n",
		"description": "Common definition for field type Text",
		"scope": "source.python"
	},
	"search": {
		"prefix": "search",
		"body": "\n${1:model_obj}.search(${2:args}${5:, offset=${4:0}}${7:, limit=${6:None}}${10:, order=${9:None}}${12:, context=${11:None}}${14:, count=${13:False}})\n",
		"description": "",
		"scope": "source.python"
	},
	"import": {
		"prefix": "import",
		"body": "\nfrom odoo import models, fields, api\nfrom odoo.tools.translate import _${0}\n",
		"description": "Common Python library import lines",
		"scope": "source.python"
	},
	"def _compute": {
		"prefix": "def _compute",
		"body": "\n@api.multi\n@api.depends('${1:depends}')\ndef _compute_${2:field}(self):\n    for record in self:\n        ${4:record.${2:field} = ${3:something}}\n${0}\n",
		"description": "_compute method signature",
		"scope": "source.python"
	},
	"def copy": {
		"prefix": "def copy",
		"body": "\n@api.one\ndef copy(self, default=None):\n    \"\"\"\n        Create a new record in ${1:ModelName} model from existing one\n        @param default: dict which contains the values to be override during\n        copy of object\n\n        @return: returns a id of newly created record\n    \"\"\"\n\n    result = super(${1:ModelName}, self).copy(default)${0}\n\n    return result\n",
		"description": "copy method signature",
		"scope": "source.python"
	},
	"def create": {
		"prefix": "def create",
		"body": "\n@api.model\ndef create(self, values):\n    \"\"\"\n        Create a new record for a model ${1:ModelName}\n        @param values: provides a data for new record\n\n        @return: returns a id of new record\n    \"\"\"\n\n    result = super(${1:Model_Name}, self).create(values)${0}\n\n    return result\n",
		"description": "create method signature",
		"scope": "source.python"
	},
	"def get_empty_list_help": {
		"prefix": "def get_empty_list_help",
		"body": "\n@api.model\ndef get_empty_list_help(self, help):\n    \"\"\" Generic method giving the help message displayed when having\n        no result to display in a list or kanban view.\n    \"\"\"\n\n    ${0:return help}\n",
		"description": "get_empty_list_help method signature",
		"scope": "source.python"
	},
	"def get_formview_id": {
		"prefix": "def get_formview_id",
		"body": "\n@api.one\n@api.returns('ir.ui.view')\ndef get_formview_id(self):\n    \"\"\" Return an view id to open the document with.\n\n        :param int id: id of the document to open\n    \"\"\"\n\n    ${0:return False}\n",
		"description": "get_formview_id method signature",
		"scope": "source.python"
	},
	"def init": {
		"prefix": "def init",
		"body": "\ndef init(self, cr):\n    \"\"\" Build database view which will be used as module origin\n\n        :param cr: database cursor\n    \"\"\"\n\n    self._sql_query = \"\"\"\n        SELECT\n            ROW_NUMBER() OVER() AS \"id\"\n    \"\"\"\n\n    drop_view_if_exists(cr, ${1:self._table})\n    cr.execute(\n        'create or replace view {} as ({})'.format(\n            ${1},\n            self._sql_query\n        )\n    )${0}\n",
		"description": "init method signature",
		"scope": "source.python"
	},
	"def onchange": {
		"prefix": "def onchange",
		"body": "\n@api.one\n@api.onchange('${1:field}')\ndef _onchange_${1}(self):\n    ${3:self.${2:field} = self.${1}}\n${0}\n",
		"description": "_onchange method signature, code",
		"scope": "source.python"
	},
	"def onchange1": {
		"prefix": "def onchange",
		"body": "\n@api.onchange('${1:field_name}')\ndef _onchange_${1}(self):\n    return {\n        'domain': {\n            '${2:field_name}': ${6:[('${3:field_name}', '${4:=}', ${5:self.${1}})]}\n        }\n    }${0}\n",
		"description": "_onchange method signature, domain",
		"scope": "source.python"
	},
	"def onchange2": {
		"prefix": "def onchange",
		"body": "\n@api.onchange('${1:field}')\ndef _onchange_${1}(self):\n    return {\n        'warning': {\n            'title': '${2:Text of the title}',\n            'message': '${3:Text of the message}'\n        }\n    }${0}\n",
		"description": "_onchange method signature, warning",
		"scope": "source.python"
	},
	"def _search": {
		"prefix": "def _search",
		"body": "\n@api.model\ndef _search_${1: field}(self, operator, value):\n    return [('${2:related}', operator, value)]${0}\n",
		"description": "_search method signature",
		"scope": "source.python"
	},
	"def unlink": {
		"prefix": "def unlink",
		"body": "\n@api.multi\ndef unlink(self):\n    \"\"\"\n        Delete all record(s) from recordset\n        return True on success, False otherwise\n\n        @return: True on success, False otherwise\n\n        #TODO: process before delete resource\n    \"\"\"\n\n    result = super(${1:ModelName}, self).unlink()${0}\n\n    return result\n",
		"description": "unlink method signature",
		"scope": "source.python"
	},
	"def view_header_get": {
		"prefix": "def view_header_get",
		"body": "\n@api.model\ndef view_header_get(self, view_id=None, view_type='form'):\n    \"\"\" Returns the window title which depends on the context \"\"\"\n\n    ${0:return False}\n",
		"description": "view_header_get method signature",
		"scope": "source.python"
	},
	"def view_init": {
		"prefix": "def view_init",
		"body": "\n@api.model\ndef view_init(self, fields_list):\n    \"\"\" Does specific things when a view on the object is opened \"\"\"\n\n    ${0:pass}\n",
		"description": "view_init method signature",
		"scope": "source.python"
	},
	"def write": {
		"prefix": "def write",
		"body": "\n@api.multi\ndef write(self, values):\n    \"\"\"\n        Update all record(s) in recordset, with new value comes as {values}\n        return True on success, False otherwise\n\n        @param values: dict of new values to be set\n\n        @return: True on success, False otherwise\n    \"\"\"\n\n    result = super(${1:Model_Name}, self).write(values)${0}\n\n    return result\n",
		"description": "write method signature",
		"scope": "source.python"
	},
	"def _browse": {
		"prefix": "def _browse",
		"body": "\n@classmethod\ndef _browse(cls, env, ids):\n    \"\"\" Returns a recordset for the ids provided as parameter in the current\n        environment.\n\n        Can take no ids, a single id or a sequence of ids.\n\n        :param cls: model class\n        :param env: environment\n        :param ids: none, a single id or a sequence of ids\n\n        :return: a recordset\n    \"\"\"\n\n    result = ${1:class_name}._browse(env, ids)\n    ${0}\n    return result\n",
		"description": "_browse method signature",
		"scope": "source.python"
	},
	"_auto": {
		"prefix": "_auto",
		"body": "\n_auto = ${1:False}${0}\n",
		"description": "Adds the _auto attribute",
		"scope": "source.python"
	},
	"_parent_store": {
		"prefix": "_parent_store",
		"body": "\n_parent_store = ${1:True}\n${0}\n\nparent_left = fields.Integer('Left Parent', index=1)\nparent_right = fields.Integer('Right Parent', index=1)\n\n",
		"description": "Adds the _parent_store attribute and parent_left and parent_right",
		"scope": "source.python"
	},
	"_sql_constraints": {
		"prefix": "_sql_constraints",
		"body": "\n_sql_constraints = [\n    (\n        '${1:name}',\n        '${2:constraint}',\n        _(u'${3:message}')\n    )${4}\n]${0}\n",
		"description": "Model SQL contraints",
		"scope": "source.python"
	},
	"_inherit": {
		"prefix": "_inherit",
		"body": "\n_inherit = ['${1:ir.model}'${2}]${0}\n",
		"description": "Model attribute _inherit with a module list",
		"scope": "source.python"
	},
	"_inherits": {
		"prefix": "_inherits",
		"body": "\n_inherits = {'${1:model_name}': '${2:related_id}'${3}}${0}\n",
		"description": "Model attribute _inherits and single parent field",
		"scope": "source.python"
	},
	"model.browse": {
		"prefix": "model.browse",
		"body": "\n${1:model}_obj = self.env['${2:model.name}']\n${1}_set = ${1}_obj.browse(${3:1})\n${0}\n",
		"description": "shortcut for model browse() ",
		"scope": "source.python"
	},
	"model.search_read": {
		"prefix": "model.search_read",
		"body": "\n${1:model}_domain = [${2:('id', '=', 1)}]\n${1}_obj = self.env['${3:model.name}']\n${1}_set = ${1}_obj.search_read(${1}_domain, [${4:id}, ${5:name}])\n${0}\n",
		"description": "shortcut for model search_read() ",
		"scope": "source.python"
	},
	"model.search": {
		"prefix": "model.search",
		"body": "\n${1:model}_domain = [${2:('id', '=', 1)}]\n${1}_obj = self.env['${3:model.name}']\n${1}_set = ${1}_obj.search(${1}_domain)\n${0}\n",
		"description": "shortcut for model search() ",
		"scope": "source.python"
	},
	"dom": {
		"prefix": "dom",
		"body": "\n${1:[}${2:'${3:&}',}('${4:field_name (in self)}','${5:=}', ${6:\"Please use: 'value' or self.dot.notation\"}),${1/^\\[/\\]/g}\n",
		"description": "Common domain definition",
		"scope": "source.python"
	},
	"id": {
		"prefix": "id",
		"body": "\nref('${1:record.external.id}')${0}\n",
		"description": "Database ID from external ID conversion",
		"scope": "text.xml"
	},
	"super": {
		"prefix": "super",
		"body": "\nsuper(${1:Extension}, self).${2:handler}(${3})\n",
		"description": "Call Python parent class",
		"scope": "source.python"
	},
	"def _log": {
		"prefix": "def _log",
		"body": "\ndef _log(self, level, msg_format, *args, **kwargs):\n    \"\"\" Outputs an formated string in log\n\n        :param level (int): 1=> debug, 2=> info, 3=> warning, 4=> error\n        :param message (basestring): name of the message\n    \"\"\"\n\n    methods = ['debug', 'info', 'warning', 'error']\n    log = getattr(_logger, methods[level])\n\n    msg = msg_format.format(*args, **kwargs)\n    log(msg)\n",
		"description": "Common _log method",
		"scope": "source.python"
	},
	"logging": {
		"prefix": "logging",
		"body": "\nimport logging\n_logger = logging.getLogger(__name__)\n\n${0}\n",
		"description": "logging instance",
		"scope": "source.python"
	},
	"t-att": {
		"prefix": "t-att",
		"body": "\nt-att-${1:name}=\"${2:value}\"\n",
		"description": "Qweb named attribute",
		"scope": "text.xml"
	},
	"t-att1": {
		"prefix": "t-att",
		"body": "\nt-att=\"${1:dict_of_pair}\"\n",
		"description": "Qweb attribute",
		"scope": "text.xml"
	},
	"t-attf": {
		"prefix": "t-attf",
		"body": "\nt-attf-${1:name}=\"${2:format_string}\"\n",
		"description": "Qweb format string attribute",
		"scope": "text.xml"
	},
	"t-call": {
		"prefix": "t-call",
		"body": "\n<t t-call=\"${1:template}\" />${0}\n",
		"description": "Qweb inline call template",
		"scope": "text.xml"
	},
	"t-call1": {
		"prefix": "t-call",
		"body": "\n<t t-call=\"${1:template}\">\n    ${0}\n</t>\n",
		"description": "Qweb call template",
		"scope": "text.xml"
	},
	"t-esc": {
		"prefix": "t-esc",
		"body": "\n<t t-esc=\"${1:value}\" />\n",
		"description": "Qweb data output",
		"scope": "text.xml"
	},
	"t-extend": {
		"prefix": "t-extend",
		"body": "\n<t t-extend=\"${1:base.template}\">\n    <t t-jquery=\"${2:ul}\" t-operation=\"${3:append}\">\n        ${4:code}\n    </t>${0}\n</t>\n",
		"description": "Qweb template inheritance",
		"scope": "text.xml"
	},
	"t-field": {
		"prefix": "t-field",
		"body": "\n<${1:span} t-field=\"${2:o}.${3:name}\" />${0}\n",
		"description": "Qweb field access",
		"scope": "text.xml"
	},
	"t-foreach": {
		"prefix": "t-foreach",
		"body": "\n<t t-foreach=\"${1:set}\" t-as=\"${2:name}\">\n    ${0}\n</t>\n",
		"description": "Qweb loop",
		"scope": "text.xml"
	},
	"t-if": {
		"prefix": "t-if",
		"body": "\n<${1:tag} t-if=\"${2:condition}\">${3:value}</${1}>${0}\n",
		"description": "Qweb inline conditional",
		"scope": "text.xml"
	},
	"t-if1": {
		"prefix": "t-if",
		"body": "\n<t t-if=\"${1:codition}\">\n    ${0}\n</t>\n",
		"description": "Qweb conditional",
		"scope": "text.xml"
	},
	"t-js": {
		"prefix": "t-js",
		"body": "\n<t t-js=\"${1:name}\">\n    ${0:console.log(\"Foo is\", ctx.foo);}\n</t>\n",
		"description": "Qweb javascript",
		"scope": "text.xml"
	},
	"t-log": {
		"prefix": "t-log",
		"body": "\n<t t-log=\"${1:value}\"/>${0}\n",
		"description": "Qweb logging",
		"scope": "text.xml"
	},
	"t-name": {
		"prefix": "t-name",
		"body": "\n<t t-name=\"${1:template-name}\">\n    ${0:<!-- template code -->}\n</t>\n",
		"description": "Qweb top level named template",
		"scope": "text.xml"
	},
	"t-raw": {
		"prefix": "t-raw",
		"body": "\n<t t-raw=\"0\" />\n",
		"description": "Qweb template from context",
		"scope": "text.xml"
	},
	"t-raw1": {
		"prefix": "t-raw",
		"body": "\n<t t-raw=\"translate_doc(${1:doc_id}, ${2:doc_model}, '${3:lang}', ${4:module.template'})\" />\n",
		"description": "Qweb translate document",
		"scope": "text.xml"
	},
	"t-set": {
		"prefix": "t-set",
		"body": "\n<t t-set=\"${1:name}\" t-value=\"${2:value}\" />${0}\n",
		"description": "Qweb inline variable",
		"scope": "text.xml"
	},
	"t-set1": {
		"prefix": "t-set",
		"body": "\n<t t-set=\"${1:name}\">\n    ${0}\n</t>\n",
		"description": "Qweb variable",
		"scope": "text.xml"
	},
	"layout": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.external_layout\">\n    ${0}\n</t>\n",
		"description": "Report external_layout",
		"scope": "text.xml"
	},
	"layout1": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.external_layout_footer\">\n    ${0}\n</t>\n",
		"description": "Report external_layout_footer",
		"scope": "text.xml"
	},
	"layout2": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.external_layout_header\">\n    ${0}\n</t>\n",
		"description": "Report external_layout_header",
		"scope": "text.xml"
	},
	"layout3": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.html_container\">\n    ${0}\n</t>\n",
		"description": "Report html_container",
		"scope": "text.xml"
	},
	"layout4": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.internal_layout\">\n    ${0}\n</t>\n",
		"description": "Report internal_layout",
		"scope": "text.xml"
	},
	"layout5": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.layout\">\n    ${0}\n</t>\n",
		"description": "Report layout",
		"scope": "text.xml"
	},
	"layout6": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.minimal_layout\">\n    ${0}\n</t>\n",
		"description": "Report minimal_layout",
		"scope": "text.xml"
	},
	"layout7": {
		"prefix": "layout",
		"body": "\n<t t-call=\"report.style\">\n    ${0}\n</t>\n",
		"description": "Report style",
		"scope": "text.xml"
	},
	"t": {
		"prefix": "t",
		"body": "\n<t t-name=\"${1:module.model.name}\">\n    <t t-call=\"report.html_container\">\n        <t t-foreach=\"docs\" t-as=\"o\">\n            <t t-call=\"report.external_layout\">\n                <div class=\"page\">\n                    <h2>${2:Report title}</h2>\n                    ${0:<p>This object's name is <span t-field=\"o.name\"/></p>}\n                </div>\n            </t>\n        </t>\n    </t>\n</t>\n",
		"description": "",
		"scope": "text.xml"
	},
	"report.paperformat": {
		"prefix": "report.paperformat",
		"body": "\n<record id=\"paperformat_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"report.paperformat\" >\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"format\">${2:A4}</field>\n    <field name=\"orientation\">${3:Portrait}</field>\n    <field name=\"default\" eval=\"${4:False}\" />\n    <field name=\"dpi\" eval=\"${5:90}\" />\n    <field name=\"margin_top\" eval=\"${6:40}\" />\n    <field name=\"margin_right\" eval=\"${7:7}\" />\n    <field name=\"margin_bottom\" eval=\"${8:20}\" />\n    <field name=\"margin_left\" eval=\"${9:7}\" />\n    <field name=\"header_line\" eval=\"${10:False}\" />\n    <field name=\"header_spacing\" eval=\"${11:35}\" />${13:\n    <field name=\"page_width\" eval=\"${12:210}\" />}${15:\n    <field name=\"page_height\" eval=\"${14:297}\" />}${17:\n    <field name=\"report_ids\" eval=\"[(4, ref('${16:ir.actions.report.xml}'))]\" />}${0}\n</record>\n",
		"description": "Common record definition for report.paperformat",
		"scope": "text.xml"
	},
	"fullreport": {
		"prefix": "fullreport",
		"body": "\n<!-- REPORT: \"${1:Human readable name}\"\n\n    - Module: ${2:module}    Model: ${3:model}\n    - Language field used to translate it: ${4:lang}\n    - Report uses attachment: ${5:True}\n    - Report paperformat: ${6:report.paperformat_euro}\n    - View priority: ${7:16}    Active: ${8:True}\n    - Action help: ${9:Something about ${1/(.)/\\1/g}}\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n\n<!-- Report \"${1/(.)/\\1/g}\" document template -->\n<record id=\"view_${3/\\./\\_/g}_document_qweb\" model=\"ir.ui.view\">\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"model\">${3/(.)/\\1/g}</field>\n    <field name=\"type\">qweb</field>\n    <field name=\"mode\">primary</field>\n    <field name=\"priority\" eval=\"${7/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"${8/(.)/\\1/g}\" />\n    <field name=\"arch\" type=\"xml\">\n        <t t-name=\"${2/(.)/\\1/g}.view_${3/\\./\\_/g}_document_qweb\">\n            <t t-call=\"report.external_layout\">\n                <div class=\"page\">\n                    ${0:<h2>Report title</h2>\n                    <p>This object's name is <span t-field=\"o.name\"/></p>}\n                </div>\n            </t>\n        </t>\n    </field>\n</record>\n\n<!-- Report \"${1/(.)/\\1/g}\" translate_doc template -->\n<record id=\"view_${3/\\./\\_/g}_qweb\" model=\"ir.ui.view\">\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"model\">${3/(.)/\\1/g}</field>\n    <field name=\"type\">qweb</field>\n    <field name=\"mode\">primary</field>\n    <field name=\"priority\" eval=\"${7/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"${8/(.)/\\1/g}\" />\n    <field name=\"arch\" type=\"xml\">\n        <t t-name=\"${2/(.)/\\1/g}.view_${3/\\./\\_/g}_qweb\">\n            <t t-call=\"report.html_container\">\n                <t t-foreach=\"doc_ids\" t-as=\"doc_id\">\n                    <t t-raw=\"translate_doc(doc_id, doc_model, '${4/(.)/\\1/g}', '${2/(.)/\\1/g}.view_${3/\\./\\_/g}_document_qweb')\"/>\n                </t>\n            </t>\n        </t>\n    </field>\n</record>\n\n<!-- Report action to show: \"${1/(.)/\\1/g}\" -->\n<record id=\"action_report_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.actions.report.xml\">\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"model\">${3/(.)/\\1/g}</field>\n    <field name=\"report_type\">qweb-pdf</field>\n    <field name=\"report_name\">${2/(.)/\\1/g}.view_${3/\\./\\_/g}_qweb</field>\n    <field name=\"attachment_use\" eval=\"${5/(.)/\\1/g}\" />\n    <field name=\"attachment\">(object.name+'.pdf')</field>\n    <field name=\"paperformat_id\" ref=\"${6/(.)/\\1/g}\" />\n    <field name=\"help\">${9/(.)/\\1/g}</field>\n</record>\n\n<!-- Button to print the report: \"${1/(.)/\\1/g}\" -->\n<record id=\"${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_values\" model=\"ir.values\">\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"model_id\" ref=\"${2/(.)/\\1/g}.model_${3/\\./\\_/g}\" />\n    <field name=\"model\">${3/(.)/\\1/g}</field>\n    <field name=\"value\" eval=\"'ir.actions.report.xml,' +str(ref('action_report_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}'))\" />\n    <field name=\"key\">action</field>\n    <field name=\"key2\">client_print_multi</field>\n</record>\n",
		"description": "Report: document and translation; action.report.xml and ir.values",
		"scope": "text.xml"
	},
	"ir.model.access.csv": {
		"prefix": "ir.model.access.csv",
		"body": "\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\n",
		"description": "ir.model.access.csv file",
		"scope": "text.plain"
	},
	"access": {
		"prefix": "access",
		"body": "\naccess_${3:module}_${1:model_name}_${2:group_name},${1}.${2},${3}.model_${1},${3}.group_${2},1,0,0,0\n",
		"description": "ir.model.access record",
		"scope": "text.plain"
	},
	"ir.model.access": {
		"prefix": "ir.model.access",
		"body": "\n<record id=\"access_${1/^.*model_(.*)$/\\1/g}_${2/((^.*group_$)|(\\.))/(?2:group_)(?3:\\_)/g}\" model=\"ir.model.access\">\n    <field name=\"name\">${1/^.*model_(.*)$/\\1/g} ${2/((^.*group_$)|(\\.))/(?2:group_)(?3:\\_)/g}</field>\n    <field name=\"model_id\" ref=\"${1:ir.model}\"/>\n    <field name=\"group_id\" ref=\"${2:res.groups}\"/>\n    <field name=\"perm_read\" eval=\"${3:True}\" />\n    <field name=\"perm_create\" eval=\"${4:True}\" />\n    <field name=\"perm_write\" eval=\"${5:True}\" />\n    <field name=\"perm_unlink\" eval=\"${6:True}\" />\n    <field name=\"active\" eval=\"${7:True}\" />\n</record>${0}\n",
		"description": "XML ir.model.access record",
		"scope": "text.xml"
	},
	"ir.rule": {
		"prefix": "ir.rule",
		"body": "\n<record id=\"${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_rule\" model=\"ir.rule\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\" ref=\"${3:model_xml_id}\"/>\n    <field name=\"global\" eval=\"${4:True}\" />\n    <field name=\"perm_read\" eval=\"${5:True}\" />\n    <field name=\"perm_create\" eval=\"${6:True}\" />\n    <field name=\"perm_write\" eval=\"${7:True}\" />\n    <field name=\"perm_unlink\" eval=\"${8:True}\" />\n    <field name=\"domain_force\">${9:['|',('company_id','=',False),('company_id','child_of',[user.company_id.id])]}</field>\n    <field name=\"active\" eval=\"${10:True}\" />\n</record>${0}\n",
		"description": "XML ir.rule record",
		"scope": "text.xml"
	},
	"res.groups": {
		"prefix": "res.groups",
		"body": "\n<record id=\"group_${8:${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}}\" model=\"res.groups\">\n    <field name=\"name\">${1:Name}</field>\n    <field name=\"comment\">${2:Comment}</field>\n    <field name=\"category_id\" ref=\"${3:base.module_category_administration}\"/>\n    <field name=\"implied_ids\" eval=\"[(4, ref('${5:base.group_user}'))]\"/>\n    <field name=\"users\" eval=\"[(5, ref('${6:base.user_root}'))]\" />\n</record>${0}\n",
		"description": "XML res.groups record",
		"scope": "text.xml"
	},
	"addTypeEqualityFunc": {
		"prefix": "addTypeEqualityFunc",
		"body": "\naddTypeEqualityFunc(${1:typeobj}, ${2:function})\n",
		"description": "addTypeEqualityFunc",
		"scope": "source.python"
	},
	"assertAlmostEqual": {
		"prefix": "assertAlmostEqual",
		"body": "\nassertAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${8:, ${7:delta=None}})\n",
		"description": "assertAlmostEqual",
		"scope": "source.python"
	},
	"assertDictContainsSubset": {
		"prefix": "assertDictContainsSubset",
		"body": "\nassertDictContainsSubset(${1:expected}, ${2:actual}${4:, ${3:msg=None}})\n",
		"description": "assertDictContainsSubset",
		"scope": "source.python"
	},
	"assertDictEqual": {
		"prefix": "assertDictEqual",
		"body": "\nassertDictEqual(${1:expected}, ${2:actual}${4:, ${3:msg=None}})\n",
		"description": "assertDictEqual",
		"scope": "source.python"
	},
	"assertEqual": {
		"prefix": "assertEqual",
		"body": "\nassertEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertEqual",
		"scope": "source.python"
	},
	"assertFalse": {
		"prefix": "assertFalse",
		"body": "\nassertFalse(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertFalse",
		"scope": "source.python"
	},
	"assertGreater": {
		"prefix": "assertGreater",
		"body": "\nassertGreater(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertGreater",
		"scope": "source.python"
	},
	"assertGreaterEqual": {
		"prefix": "assertGreaterEqual",
		"body": "\nassertGreaterEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertGreaterEqual",
		"scope": "source.python"
	},
	"assertIn": {
		"prefix": "assertIn",
		"body": "\nassertIn(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertIn",
		"scope": "source.python"
	},
	"assertIs": {
		"prefix": "assertIs",
		"body": "\nassertIs(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertIs",
		"scope": "source.python"
	},
	"assertIsInstance": {
		"prefix": "assertIsInstance",
		"body": "\nassertIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})\n",
		"description": "assertIsInstance",
		"scope": "source.python"
	},
	"assertIsNone": {
		"prefix": "assertIsNone",
		"body": "\nassertIsNone(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertIsNone",
		"scope": "source.python"
	},
	"assertIsNot": {
		"prefix": "assertIsNot",
		"body": "\nassertIsNot(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertIsNot",
		"scope": "source.python"
	},
	"assertIsNotNone": {
		"prefix": "assertIsNotNone",
		"body": "\nassertIsNotNone(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertIsNotNone",
		"scope": "source.python"
	},
	"assertItemsEqual": {
		"prefix": "assertItemsEqual",
		"body": "\nassertItemsEqual(${1:actual}, ${2:expected}${4:, ${3:msg=None}})\n",
		"description": "assertItemsEqual",
		"scope": "source.python"
	},
	"assertLess": {
		"prefix": "assertLess",
		"body": "\nassertLess(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertLess",
		"scope": "source.python"
	},
	"assertLessEqual": {
		"prefix": "assertLessEqual",
		"body": "\nassertLessEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertLessEqual",
		"scope": "source.python"
	},
	"assertListEqual": {
		"prefix": "assertListEqual",
		"body": "\nassertListEqual(${1:list1}, ${2:list2}${4:, ${3:msg=None}})\n",
		"description": "assertListEqual",
		"scope": "source.python"
	},
	"assertMultiLineEqual": {
		"prefix": "assertMultiLineEqual",
		"body": "\nassertMultiLineEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertMultiLineEqual",
		"scope": "source.python"
	},
	"assertNotAlmostEqual": {
		"prefix": "assertNotAlmostEqual",
		"body": "\nassertNotAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${9:, ${8:delta=None}})\n",
		"description": "assertNotAlmostEqual",
		"scope": "source.python"
	},
	"assertNotEqual": {
		"prefix": "assertNotEqual",
		"body": "\nassertNotEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertNotEqual",
		"scope": "source.python"
	},
	"assertNotIn": {
		"prefix": "assertNotIn",
		"body": "\nassertNotIn(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertNotIn",
		"scope": "source.python"
	},
	"assertNotIsInstance": {
		"prefix": "assertNotIsInstance",
		"body": "\nassertNotIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})\n",
		"description": "assertNotIsInstance",
		"scope": "source.python"
	},
	"assertNotRegexpMatches": {
		"prefix": "assertNotRegexpMatches",
		"body": "\nassertNotRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})\n",
		"description": "assertNotRegexpMatches",
		"scope": "source.python"
	},
	"assertRaises": {
		"prefix": "assertRaises",
		"body": "\nassertRaises(${1:exception}, ${2:callable}, ${3:*args}, ${4:**kwds})\n",
		"description": "assertRaises (extended)",
		"scope": "source.python"
	},
	"assertRaises1": {
		"prefix": "assertRaises",
		"body": "\nassertRaises(${1:exception})\n",
		"description": "assertRaises",
		"scope": "source.python"
	},
	"assertRaisesRegexp": {
		"prefix": "assertRaisesRegexp",
		"body": "\nassertRaisesRegexp(${1:exception}, ${2:regexp}, ${3:callable}, ${4:*args}, ${5:**kwds})\n",
		"description": "assertRaisesRegexp (extended)",
		"scope": "source.python"
	},
	"assertRaisesRegexp1": {
		"prefix": "assertRaisesRegexp",
		"body": "\nassertRaisesRegexp(${1:exception}, ${2:regexp})\n",
		"description": "assertRaisesRegexp",
		"scope": "source.python"
	},
	"assertRegexpMatches": {
		"prefix": "assertRegexpMatches",
		"body": "\nassertRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})\n",
		"description": "assertRegexpMatches",
		"scope": "source.python"
	},
	"assertSequenceEqual": {
		"prefix": "assertSequenceEqual",
		"body": "\nassertSequenceEqual(${1:seq1}, ${2:seq2}${4:, ${3:msg=None}}${6:, ${5:seq_type=None}})\n",
		"description": "assertSequenceEqual",
		"scope": "source.python"
	},
	"assertSetEqual": {
		"prefix": "assertSetEqual",
		"body": "\nassertSetEqual(${1:set1}, ${2:set2}${4:, ${3:msg=None}})\n",
		"description": "assertSetEqual",
		"scope": "source.python"
	},
	"assertTrue": {
		"prefix": "assertTrue",
		"body": "\nassertTrue(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertTrue",
		"scope": "source.python"
	},
	"assertTupleEqual": {
		"prefix": "assertTupleEqual",
		"body": "\nassertTupleEqual(${1:tuple1}, ${2:tuple2}${4:, ${3:msg=None}})\n",
		"description": "assertTupleEqual",
		"scope": "source.python"
	},
	"fail": {
		"prefix": "fail",
		"body": "\nfail(${1:msg=None})\n",
		"description": "fail",
		"scope": "source.python"
	},
	"test": {
		"prefix": "test",
		"body": "\ndef test_${1:item_name}(self):\n    \"\"\" Checks if the ${1} works properly\n    \"\"\"\n\n    ${0:pass}\n",
		"description": "Test case method",
		"scope": "source.python"
	},
	"TransactionCase": {
		"prefix": "TransactionCase",
		"body": "\nfrom openerp.tests.common import TransactionCase\n\n\nclass ${1:ModelName}(TransactionCase):\n    \"\"\" ${2:This class contains the unit tests for '${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}'.}\n\n        Tests:\n          - ${3}: Checks if the ${3} works properly\n    \"\"\"\n\n    def setUp(self):\n        super(${1}, self).setUp()\n\n    def test_${3:item_name}(self):\n        \"\"\" Checks if the ${3} works properly \"\"\"\n\n        ${0:pass}\n",
		"description": "",
		"scope": "source.python"
	},
	"attrs": {
		"prefix": "attrs",
		"body": "\nattrs=\"{'readonly': [('state','not in',('draft'))]}\"\n",
		"description": "field attr attrs",
		"scope": "text.xml meta.tag.xml"
	},
	"domain": {
		"prefix": "domain",
		"body": "\ndomain=\"[('${1:name}', '=', '${1}')]\"\n",
		"description": "field attr domain",
		"scope": "text.xml meta.tag.xml"
	},
	"groups": {
		"prefix": "groups",
		"body": "\ngroups=\"${1:module}.group_${2:groupNmae}\"\n",
		"description": "field attr groups",
		"scope": "text.xml meta.tag.xml"
	},
	"invisible": {
		"prefix": "invisible",
		"body": "\ninvisible=\"${1:true}\"\n",
		"description": "field attr invisible",
		"scope": "text.xml meta.tag.xml"
	},
	"options": {
		"prefix": "options",
		"body": "\noptions=\"{'no_create': True, 'no_open': True, 'no_create_edit': True}\"\n",
		"description": "field attr options no_create",
		"scope": "text.xml meta.tag.xml"
	},
	"readonly": {
		"prefix": "readonly",
		"body": "\nreadonly=\"${1:true}\"\n",
		"description": "field attr readonly",
		"scope": "text.xml meta.tag.xml"
	},
	"required": {
		"prefix": "required",
		"body": "\nrequired=\"${1:true}\"\n",
		"description": "field attr required",
		"scope": "text.xml meta.tag.xml"
	},
	"widget": {
		"prefix": "widget",
		"body": "\nwidget=\"${1:widget}\"\n",
		"description": "field attr widget",
		"scope": "text.xml meta.tag.xml"
	},
	"field": {
		"prefix": "field",
		"body": "\n<field\n    name=\"${1:name}\"\n    string=\"${2:${1/((^.)|(_+))/(?2:\\u$2)(?3:\\ )/g}}\"\n    nolabel=\"${3:0}\"\n    required=\"${4:True}\"\n    readonly=\"${5:True}\"\n    invisible=\"${6:True}\"\n    widget=\"${7:char}\"\n    class=\"${8:oe_field_${1/([^a-zA-Z\\-\\_0-9]+)/\\_/g}}\"\n    placeholder=\"${9:${1/((^.)|(_+))/(?2:\\u$2)(?3:\\ )/g}}\"\n    help=\"${10:Enter new value for ${1/((^.)|(_+))/(?2:\\u$2)(?3:\\ )/g}}\"\n    mode=\"${11:tree}\"\n    filename=\"${12:${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}}\"\n    password=\"${13:0}\"\n    domain=\"${14:[]}\"\n    context=\"${15:\\{\\}}\" />${0}\n",
		"description": "Full field tag",
		"scope": "text.xml"
	},
	"field1": {
		"prefix": "field",
		"body": "\n<field name=\"${1:name}\" class=\"${2:oe_field_${1/([^a-zA-Z\\-\\_0-9]+)/\\_/g}}\"${4:\n    placeholder=\"${3:Enter new value for ${1/((^.)|(_+))/(?2:\\u$2)(?3:\\ )/g}}\"} />${0}\n",
		"description": "Common field tag",
		"scope": "text.xml"
	},
	"fields.Boolean1": {
		"prefix": "fields.Boolean",
		"body": "\n<field name=\"${1:name}\" eval=\"${2:True}\" />${0}\n",
		"description": "Common XML tag for field type Boolean",
		"scope": "text.xml"
	},
	"fields.Char1": {
		"prefix": "fields.Char",
		"body": "\n<field name=\"${1:name}\">${2:value}</field>${0}\n",
		"description": "Common XML tag for field type Char",
		"scope": "text.xml"
	},
	"fields.Date1": {
		"prefix": "fields.Date",
		"body": "\n<field name=\"${1:name}\" eval=\"${3:time.strftime('${2:%Y-%m-%d}')}\" />${0}\n",
		"description": "Common XML tag for field type Date",
		"scope": "text.xml"
	},
	"fields.Datetime1": {
		"prefix": "fields.Datetime",
		"body": "\n<field name=\"${1:name}\" eval=\"${3:time.strftime('${2:%Y-%m-%d %H:%M:%S}')}\" />${0}\n",
		"description": "Common XML tag for field type Datetime",
		"scope": "text.xml"
	},
	"fields.Float1": {
		"prefix": "fields.Float",
		"body": "\n<field name=\"${1:name}\" eval=\"${2:0.0}\" />${0}\n",
		"description": "Common XML tag for field type Float",
		"scope": "text.xml"
	},
	"fields.Html1": {
		"prefix": "fields.Html",
		"body": "\n<field name=\"${1:name}\"><![CDATA[\n    ${2:content}\n]]${-1}></field>${0}\n",
		"description": "Common XML tag for field type Html",
		"scope": "text.xml"
	},
	"fields.Integer1": {
		"prefix": "fields.Integer",
		"body": "\n<field name=\"${1:name}\" eval=\"${2:0}\" />${0}\n",
		"description": "Common XML tag for field type Integer",
		"scope": "text.xml"
	},
	"fields.Many2many1": {
		"prefix": "fields.Many2many",
		"body": "\n<field name=\"${1:name}\" eval=\"${3:[(4, ref('${2:ir.model}'))]}\" />${0}\n",
		"description": "Common XML tag for field type Many2many",
		"scope": "text.xml"
	},
	"fields.Many2one1": {
		"prefix": "fields.Many2one",
		"body": "\n<field name=\"${1:name}\" ref=\"${2:ir.model}\" />${0}\n",
		"description": "Common XML tag for field type Many2one",
		"scope": "text.xml"
	},
	"fields.One2many1": {
		"prefix": "fields.One2many",
		"body": "\n<field name=\"${1:name}\" eval=\"${3:[(4, ref('${2:ir.model}'))]}\" />${0}\n",
		"description": "Common XML tag for field type One2many",
		"scope": "text.xml"
	},
	"fields.Selection1": {
		"prefix": "fields.Selection",
		"body": "\n<field name=\"${1:name}\">${2:value}</field>${0}\n",
		"description": "Common XML tag for field type Selection",
		"scope": "text.xml"
	},
	"fields.Text1": {
		"prefix": "fields.Text",
		"body": "\n<field name=\"${1:name}\"><![CDATA[\n    ${2:content}\n]]${-1}></field>${0}\n",
		"description": "Common XML tag for field type Text",
		"scope": "text.xml"
	},
	"record ir.actions.act_window": {
		"prefix": "record ir.actions.act_window",
		"body": "\n<!-- VIEWS: \"${1:Human readable name}\"\n\n    - Model·········: ${2:model}\n    - _rec_name·····: ${3:name}\n    - Domain········: ${4:[]}\n    - Context·······: ${5:\\{\\}}\n    - Parent menu ··: ${6:base.menu_custom}\n    - View priority·: ${7:16}    \n    - Sequence····..: ${8:10}\n    - Action help···: ${9:Something about ${2/(.)/$1/g}}\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n\n<!-- Main window action for \"${2/(.)/\\1/g}\" -->\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_act_window\" model=\"ir.actions.act_window\">\n    <field name=\"type\">ir.actions.act_window</field>\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"res_model\">${2/\\.+/\\./g}</field>\n    <field name=\"view_mode\">tree,form</field>\n    <field name=\"view_type\">form</field>\n    <field name=\"target\">current</field>\n    <field name=\"domain\">${4/(.)/\\1/g}</field>\n    <field name=\"context\">${5/(.)/\\1/g}</field>\n    <field name=\"search_view_id\" ref=\"view_${2/\\./\\_/g}_search\" />\n    <field name=\"help\" type=\"html\">\n        <p class=\"oe_view_nocontent_create\">\n            Click to add new ${1/(.)/\\1/g}\n        </p><p>\n            ${9/(.)/\\1/g}\n        </p>\n    </field>\n</record>\n\n",
		"description": "Common ir.actions.act_window record definition",
		"scope": "text.xml"
	},
	"record ir.filters": {
		"prefix": "record ir.filters",
		"body": "\n<record id=\"${7:filter_${2/(\\.)/\\_/g}_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}}\" model=\"ir.filters\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model_id\">${2:model_name_whithout_module}</field>\n    <field name=\"user_id\" eval=\"${3:False}\"/>\n    <field name=\"domain\">${4:[]}</field>\n    <field name=\"context\">${5:{}}</field>\n    <field name=\"is_default\" eval=\"${6:False}\" />\n    <!-- <field name=\"action_id\" ref=\"\" /> -->\n</record>${8}\n",
		"description": "Common ir.filters record definition",
		"scope": "text.xml"
	},
	"record ir.ui.menu": {
		"prefix": "record ir.ui.menu",
		"body": "\n<record id=\"menu_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.ui.menu\" >\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"sequence\" eval=\"${2:10}\" />${4:\n    <field name=\"action\" ref=\"${3:action_name}\" />}${6:\n    <field name=\"parent_id\" ref=\"${5:base.menu_custom}\" />}\n</record>${0}\n",
		"description": "Common ir.ui.menu record definition",
		"scope": "text.xml"
	},
	"attribute": {
		"prefix": "attribute",
		"body": "\n<attribute name=\"${1:field_name}\">${2:value}</attribute>${0}\n",
		"description": "",
		"scope": "text.xml"
	},
	"button": {
		"prefix": "button",
		"body": "\n<button name=\"${1:function_name}\" string=\"${2:string}\" ${4:type=\"${3:object}\"} ${5:special=\"cancel\"} />\n",
		"description": "Inline button tag definition",
		"scope": "text.xml"
	},
	"button1": {
		"prefix": "button",
		"body": "\n<button name=\"${1:function_name}\"\n        string=\"${2:string}\"${4:\n        type=\"${3:object}\"}${5:\n        special=\"cancel\"}${7:\n        default_focus=\"${6:0}\"}${9:\n        icon=\"${8:gtk-apply}\"}${11:\n        confirm=\"${10:message}\"}${13:\n        help=\"${12:message}\"} />\n",
		"description": "Common button tag definition",
		"scope": "text.xml"
	},
	"attrs1": {
		"prefix": "attrs",
		"body": "\nattrs=\"{'${1:attribute_name}': [${5}('${2:field_name}', '${3:operator}', ${4:value})]${6}}\"${0}\n",
		"description": "",
		"scope": "text.xml"
	},
	"form": {
		"prefix": "form",
		"body": "\n<form string=\"${1:Caption}\" create=\"${2:1}\" delete=\"${3:1}\" edit=\"${4:1}\">\n    <sheet>\n        <div class=\"oe_title\">\n            <label for=\"${5:name}\" class=\"oe_edit_only\" />\n            <h1><field name=\"${5}\" placeholder=\"${7:Describe the item...}\" /></h1>\n        </div>\n        ${0}\n    </sheet>\n</form>\n",
		"description": "Common form tag to be added inside a ir.ui.view",
		"scope": "text.xml"
	},
	"graph": {
		"prefix": "graph",
		"body": "\n<graph string=\"${1:Graph title}\" type=\"${2:one # bar # pie # line # pivot}\">\n    <field type=\"row\" name=\"${3:row_field}\" />\n    <field type=\"col\" name=\"${4:col_field}\" interval=\"month\" />\n    <field type=\"measure\" name=\"${5:measure_field}\" />\n</graph>${0}\n",
		"description": "Common graph tag to be added inside a ir.ui.view",
		"scope": "text.xml"
	},
	"group": {
		"prefix": "group",
		"body": "\n<group>\n        ${0}\n    \n\n</group>\n\n",
		"description": "",
		"scope": "text.xml"
	},
	"label": {
		"prefix": "label",
		"body": "\n<label for='${1:field_name}'>${2:Label}</label>\n",
		"description": "Field Label",
		"scope": "text.xml"
	},
	"link": {
		"prefix": "link",
		"body": "\n<link rel=\"stylesheet\" href=\"/${1:module_name}/static/src/css/${2:styles}.css\" />${0}\n",
		"description": "Link tag to inglude an stylesheet",
		"scope": "text.xml"
	},
	"notebook": {
		"prefix": "notebook",
		"body": "\n<notebook>\n    ${0}\n</notebook>\n",
		"description": "",
		"scope": "text.xml"
	},
	"script": {
		"prefix": "script",
		"body": "\n<script type=\"text/javascript\" src=\"/${1:module_name}/static/src/js/${2:scripts}.js\" />${0}\n",
		"description": "Script tag to inglude an javascript",
		"scope": "text.xml"
	},
	"filter": {
		"prefix": "filter",
		"body": "\n<filter string=\"${1:Name}\"\n    name=\"${2:${1/(([A-Za-z0-9])|( )|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)(?4:\\_)/g}}\"\n    domain=\"${3:[]}\"\n    context=\"${4:{}}\"\n    help=\"${5}\" />${0}\n",
		"description": "Common filter tag to be added inside a search view",
		"scope": "text.xml"
	},
	"search1": {
		"prefix": "search",
		"body": "\n<search string=\"${1:Name}\">\n    ${0}\n</search>\n",
		"description": "Common search tag to be added inside a ir.ui.view",
		"scope": "text.xml"
	},
	"page": {
		"prefix": "page",
		"body": "\n<page string=\"${1:Title}\" class=\"${2:oe_page_${1/(([a-zA-Z])|([^A-Za-z]))/(?2:\\l$2)(?3:\\_)/g}}\" accesskey=\"${3:${1/(^.)(.*)/\\U\\1/g}}\">\n    ${0}\n</page>\n",
		"description": "",
		"scope": "text.xml"
	},
	"tree": {
		"prefix": "tree",
		"body": "\n<tree string=\"${1:Caption}\" create=\"${2:1}\" delete=\"${3:1}\" edit=\"${4:1}\"${6: editable=\"${5:top}\"}>\n    ${0}\n</tree>\n",
		"description": "Common tree tag to be added inside a ir.ui.view",
		"scope": "text.xml"
	},
	"xpath": {
		"prefix": "xpath",
		"body": "\n<xpath expr=\"${1://field[@name='name']}\" position=\"${2:after}\">\n    ${0}\n</xpath>\n",
		"description": "Common xpath tag to be added inside a ir.ui.view",
		"scope": "text.xml"
	},
	"record ir.ui.view": {
		"prefix": "record ir.ui.view",
		"body": "\n<record id=\"view_${2/[^a-z]+/\\_/g}_${3}\" model=\"ir.ui.view\">\n    <field name=\"name\">${1:Human readable name}</field>\n    <field name=\"model\">${2:model.name}</field>\n    <field name=\"type\">${3:tree}</field>\n    <field name=\"mode\">${4:primary}</field>\n    <field name=\"priority\" eval=\"${5:16}\" />\n    <field name=\"active\" eval=\"${6:True}\" />${8:\n    <field name=\"inherit_id\" ref=\"${7:xml_id}\" />}\n    <field name=\"arch\" type=\"xml\">\n        ${0}\n    </field>\n</record>\n",
		"description": "Common ir.ui.view record definition",
		"scope": "text.xml"
	},
	"relativetime": {
		"prefix": "relativetime",
		"body": "\n(DateTime.now() - relativedelta(${1:months=2})).strftime('${2:%Y-%m-%d}${3: }${4:%H:%M:%S}')${0}\n",
		"description": "Fully formated time relative to now",
		"scope": "text.xml"
	},
	"record ir.ui.view1": {
		"prefix": "record ir.ui.view",
		"body": "\n<record id=\"view_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_assets\" model=\"ir.ui.view\">\n    <field name=\"name\">${1:module} assets</field>\n    <field name=\"model\"></field>\n    <field name=\"type\">qweb</field>\n    <field name=\"mode\">extension</field>\n    <field name=\"priority\" eval=\"${2:16}\" />\n    <field name=\"active\" eval=\"${3:True}\" />\n    <field name=\"inherit_id\" ref=\"web.assets_backend\" />\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\".\" position=\"inside\">${5:\n            <link rel=\"stylesheet\" href=\"/${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}/static/src/css/${4:styles}.css\" />}${7:\n            <script type=\"text/javascript\" src=\"/${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}/static/src/js/${6:scripts}.js\" />}${0}\n        </xpath>\n    </field>\n</record>\n",
		"description": "Include module assets in backend views",
		"scope": "text.xml"
	},
	"view inherit": {
		"prefix": "view inherit",
		"body": "\n<!--\n\n${1:Human readable name}\n${1/./=/g}\n\nInherited Views\n\n- - - - - - - - - ${2/((..)|(.))/(?2:-\\ )(?3:-)/g}\n- Model·········: ${2:model}\n- Base Module···: ${3:module_name}\n- Mode··········: ${4:primary|extension}\n- View priority·: ${5:16}\n- - - - - - - - - ${2/((..)|(.))/(?2:-\\ )(?3:-)/g}\n\n-->\n\n<!-- ${4/(^.)/(?1:\\u$1)/g} Inherited .:Tree:. view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_tree_inherited\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.tree inherited</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <!-- Please veryfiy, that the following inherited view really sticks to the naming convention. -->\n    <field name=\"inherit_id\" ref=\"${3:module_name}.view_${2/\\./\\_/g}_tree\" />\n    <field name=\"type\">tree</field>\n    <field name=\"mode\">${4:primary}</field>\n    <field name=\"priority\" eval=\"${5/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"True\" />\n    <field name=\"arch\" type=\"xml\">\n        <xpath expr=\"//field[@name='${0:name}']\" position=\"after\">\n            \n        </xpath>\n    </field>\n</record>\n\n<!-- ${4/(^.)/(?1:\\u$1)/g} Inherited .:Form:. view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_form_inherited\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.form inherited</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <!-- Please veryfiy, that the following inherited view really sticks to the naming convention. -->\n    <field name=\"inherit_id\" ref=\"${3:module_name}.view_${2/\\./\\_/g}_form\" />\n    <field name=\"type\">form</field>\n    <field name=\"mode\">${4:primary}</field>\n    <field name=\"priority\" eval=\"${5/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"True\" />\n    <field name=\"arch\" type=\"xml\">\n        <!-- \n        <xpath expr=\"//field[@name='${0:name}']\" position=\"after\">\n            \n        </xpath>\n         -->\n    </field>\n</record>\n\n<!-- ${4/(^.)/(?1:\\u$1)/g} Inherited .:Search:. view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_search_inherited\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.search inherited</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <!-- Please veryfiy, that the following inherited view really sticks to the naming convention. -->\n    <field name=\"inherit_id\" ref=\"${3:module_name}.view_${2/\\./\\_/g}_search\" />\n    <field name=\"type\">search</field>\n    <field name=\"mode\">${4:primary}</field>\n    <field name=\"priority\" eval=\"${5/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"True\" />\n    <field name=\"arch\" type=\"xml\">\n        <!-- \n        <xpath expr=\"//field[@name='${0:name}']\" position=\"after\">\n            \n        </xpath>\n        -->\n    </field>\n</record>\n",
		"description": "Inherited Views: tree, form, search",
		"scope": "text.xml"
	},
	"view full": {
		"prefix": "view full",
		"body": "\n<!-- VIEWS: \"${1:Human readable name}\"\n\n    - Model·········: ${2:model}\n    - _rec_name·····: ${3:name}\n    - Domain········: ${4:[]}\n    - Context·······: ${5:\\{\\}}\n    - Parent menu ··: ${6:base.menu_custom}\n    - View priority·: ${7:16}    \n    - Sequence····..: ${8:10}\n    - Action help···: ${9:Something about ${2/(.)/$1/g}}\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n\n<!-- Tree view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_tree\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.tree</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <field name=\"type\">tree</field>\n    <field name=\"mode\">primary</field>\n    <field name=\"priority\" eval=\"${7/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"True\" />\n    <field name=\"arch\" type=\"xml\">\n        <tree string=\"${2/\\./\\_/g}_tree\" create=\"1\" delete=\"1\" edit=\"1\">\n            <field name=\"${3/(.)/\\1/g}\" />\n            ${0:<!-- ··· -->}\n        </tree>\n    </field>\n</record>\n\n<!-- Form view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_form\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.form</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <field name=\"type\">form</field>\n    <field name=\"mode\">primary</field>\n    <field name=\"priority\" eval=\"${7/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"True\" />\n    <field name=\"arch\" type=\"xml\">\n        <form string=\"${2/\\./\\_/g}_form\" create=\"1\" delete=\"1\" edit=\"1\">\n            <sheet>\n                <div class=\"oe_title\">\n                    <label for=\"${3/(.)/\\1/g}\" class=\"oe_edit_only\" />\n                    <h1>\n                        <field name=\"${3/(.)/\\1/g}\" class=\"oe_field_${3/(.)/\\1/g}\"\n                            placeholder=\"${3/((^.)|(_+))/(?2:\\u$2)(?3:\\ )/g}\" />\n                    </h1>\n                </div>\n                <!-- ··· -->\n            </sheet>\n        </form>\n    </field>\n</record>\n\n<!-- Search view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_search\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.search</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <field name=\"type\">search</field>\n    <field name=\"mode\">primary</field>\n    <field name=\"priority\" eval=\"${7/(.)/\\1/g}\" />\n    <field name=\"active\" eval=\"True\" />\n    <field name=\"arch\" type=\"xml\">\n        <search string=\"${2/\\./\\_/g}_search\">\n            <field name=\"${3/(.)/\\1/g}\" />\n            <!-- ··· -->\n        </search>\n    </field>\n</record>\n\n<!-- Main window action for \"${2/(.)/\\1/g}\" -->\n<record id=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_act_window\" model=\"ir.actions.act_window\">\n    <field name=\"type\">ir.actions.act_window</field>\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"res_model\">${2/\\.+/\\./g}</field>\n    <field name=\"view_mode\">tree,form</field>\n    <field name=\"view_type\">form</field>\n    <field name=\"target\">current</field>\n    <field name=\"domain\">${4/(.)/\\1/g}</field>\n    <field name=\"context\">${5/(.)/\\1/g}</field>\n    <field name=\"search_view_id\" ref=\"view_${2/\\./\\_/g}_search\" />\n    <field name=\"help\" type=\"html\">\n        <p class=\"oe_view_nocontent_create\">\n            Click to add new ${1/(.)/\\1/g}\n        </p><p>\n            ${9/(.)/\\1/g}\n        </p>\n    </field>\n</record>\n\n<!-- Main menu for \"${2/(.)/\\1/g}\" -->\n<record id=\"menu_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}\" model=\"ir.ui.menu\" >\n    <field name=\"name\">${1/(.)/\\1/g}</field>\n    <field name=\"sequence\" eval=\"${8/(.)/\\1/g}\" />\n    <field name=\"action\" ref=\"action_${1/(([A-Za-z0-9])|([^A-Za-z0-9]+))/(?2:\\l$2)(?3:\\_)/g}_act_window\" />\n    <field name=\"parent_id\" ref=\"${6/(.)/\\1/g}\" />\n</record>\n",
		"description": "Views: tree, form, search; act_window and menu",
		"scope": "text.xml"
	},
	"view inherit1": {
		"prefix": "view inherit",
		"body": "\n<!-- VIEWS: \"${1:Human readable name}\"\n\n    - Model·········: ${2:model}\n    - Base Addons···: ${3:base}    \n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->\n\n<!-- Tree view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_tree\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.tree</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n    <field name=\"inherit_id\" ref=\"${3}.view_${2/\\./\\_/g}_tree\" />\n    <field name=\"arch\" type=\"xml\">\n        ${0}\n    </field>\n</record>\n\n<!-- Form view for \"${2/(.)/\\1/g}\" -->\n<record id=\"view_${2/\\./\\_/g}_form\" model=\"ir.ui.view\">\n    <field name=\"name\">view.${2/\\.+/\\./g}.form</field>\n    <field name=\"model\">${2/\\.+/\\./g}</field>\n     <field name=\"inherit_id\" ref=\"${3}.view_${2/\\./\\_/g}_form\" />\n    <field name=\"arch\" type=\"xml\">\n        ${0}\n    </field>\n</record>\n\n",
		"description": "Views: tree, form",
		"scope": "text.xml"
	},
	"chatter": {
		"prefix": "chatter",
		"body": "\n<div class=\"oe_chatter\">\n    <field name=\"message_follower_ids\" widget=\"mail_followers\" />\n    <field name=\"message_ids\" widget=\"mail_thread\" />\n</div>${0}\n",
		"description": "Common XML to add a tracking area inside a form view",
		"scope": "text.xml"
	},
	"strftime": {
		"prefix": "strftime",
		"body": "\nstrftime('${1:%Y-%m-%d}${2: }${3:%H:%M:%S}')${0}\n",
		"description": "Fully formated strftime",
		"scope": "text.xml"
	},
	"__init__": {
		"prefix": "__init__",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#    License, author and contributors information in:                         #\n#    __openerp__.py file at the root folder of this module.                   #\n###############################################################################\n\nfrom . import ${1:models}${0}\n",
		"description": "",
		"scope": "source.python"
	},
	"__manifest__": {
		"prefix": "__manifest__",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#\n#    Odoo, Open Source Management Solution\n#\n#    Copyright (c) All rights reserved:\n#        (c) 2015  $TM_FULLNAME\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU Affero General Public License as\n#    published by the Free Software Foundation, either version 3 of the\n#    License, or (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see http://www.gnu.org/licenses\n#\n###############################################################################\n{\n    'name': '${1:Human readable name}',\n    'summary': '${2:${1}} Module Project',\n    'version': '1.0',\n\n    'description': \"\"\"\n${3:${1}} Module Project.\n==============================================\n\n${4}\n    \"\"\",\n\n    'author': '${5:$TM_FULLNAME}',\n    'maintainer': '${5}',\n    'contributors': ['${6:${5} <${5}@gmail.com>}'],\n\n    'website': 'http://www.gitlab.com/${7:${5}}',\n\n    'license': 'AGPL-3',\n    'category': 'Uncategorized',\n\n    'depends': [\n        'base'\n    ],\n    'external_dependencies': {\n        'python': [\n        ],\n    },\n    'data': [\n    ],\n    'demo': [\n    ],\n    'js': [\n    ],\n    'css': [\n    ],\n    'qweb': [\n    ],\n    'images': [\n    ],\n    'test': [\n    ],\n\n    'installable': True\n}${0}\n",
		"description": "Odoo manifest file common structure",
		"scope": "source.python"
	},
	"__openerp__": {
		"prefix": "__openerp__",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#\n#    Odoo, Open Source Management Solution\n#\n#    Copyright (c) All rights reserved:\n#        (c) 2015  $TM_FULLNAME\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU Affero General Public License as\n#    published by the Free Software Foundation, either version 3 of the\n#    License, or (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see http://www.gnu.org/licenses\n#\n###############################################################################\n{\n    'name': '${1:Human readable name}',\n    'summary': '${2:${1}} Module Project',\n    'version': '1.0',\n\n    'description': \"\"\"\n${3:${1}} Module Project.\n==============================================\n\n${4}\n    \"\"\",\n\n    'author': '${5:$TM_FULLNAME}',\n    'maintainer': '${5}',\n    'contributors': ['${6:${5} <${5}@gmail.com>}'],\n\n    'website': 'http://www.gitlab.com/${7:${5}}',\n\n    'license': 'AGPL-3',\n    'category': 'Uncategorized',\n\n    'depends': [\n        'base'\n    ],\n    'external_dependencies': {\n        'python': [\n        ],\n    },\n    'data': [\n    ],\n    'demo': [\n    ],\n    'js': [\n    ],\n    'css': [\n    ],\n    'qweb': [\n    ],\n    'images': [\n    ],\n    'test': [\n    ],\n\n    'installable': True\n}${0}\n",
		"description": "Odoo manifest file common structure",
		"scope": "source.python"
	}
}