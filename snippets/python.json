{
	"odoo": {
		"prefix": "odoo",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#    License, author and contributors information in:                         #\n#    __openerp__.py file at the root folder of this module.                   #\n###############################################################################\n\nfrom openerp.http import route, request, Controller\nfrom openerp.tools.translate import _\nfrom logging import getLogger\n\n\n_logger = getLogger(__name__)\n\n\n${0}\n",
		"description": "Odoo Python controller file"
	},
	"controller": {
		"prefix": "controller",
		"body": "\nclass ${1:ControllerName}(Controller):\n    \"\"\" ${2:The summary line for a class docstring should fit on one line.}\n\n        Routes:\n          /${3:some_url}: ${4:url description}\n    \"\"\"\n\n    @route('/${3}', type='${5:http}', auth='${6:none}')\n    def ${3}(self${7:, **kw}):\n\n        pass${0}\n",
		"description": "Controller"
	},
	"odoo1": {
		"prefix": "odoo",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#    License, author and contributors information in:                         #\n#    __openerp__.py file at the root folder of this module.                   #\n###############################################################################\n\nfrom openerp import models, fields, api\nfrom openerp.tools.translate import _\nfrom logging import getLogger\n\n\n_logger = getLogger(__name__)\n\n\n${0}\n",
		"description": "Odoo Python module file"
	},
	"models.Model": {
		"prefix": "models.Model",
		"body": "\nclass ${1:ModelName}(models.Model):\n    \"\"\" ${2:The summary line for a class docstring should fit on one line.}\n\n    Fields:\n      name (Char): Human readable name which will identify each record.\n\n    \"\"\"\n\n    _name = '${3:${1}}'\n    _description = u'${4:${1}}'\n\n    _rec_name = 'name'\n    _order = 'name ASC'\n\n    name = fields.Char(\n        string='Name',\n        required=True,\n        readonly=False,\n        index=True,\n        default=None,\n        help=False,\n        size=50,\n        translate=True\n    )${0}\n",
		"description": "Odoo generic model class"
	},
	"fields.Binary": {
		"prefix": "fields.Binary",
		"body": "\n${1:field_name} = fields.Binary(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Binary"
	},
	"fields.Boolean": {
		"prefix": "fields.Boolean",
		"body": "\n${1:field_name} = fields.Boolean(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:False},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Boolean"
	},
	"fields.Char": {
		"prefix": "fields.Char",
		"body": "\n${1:field_name} = fields.Char(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    size=${8:50},\n    translate=${9:True}\n)${0}\n",
		"description": "Common definition for field type Char"
	},
	"fields.Date": {
		"prefix": "fields.Date",
		"body": "\n${1:field_name} = fields.Date(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:fields.Date.context_today()},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Date"
	},
	"fields.Datetime": {
		"prefix": "fields.Datetime",
		"body": "\n${1:field_name} = fields.Datetime(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:fields.datetime.now()},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Datetime"
	},
	"fields.Float": {
		"prefix": "fields.Float",
		"body": "\n${1:field_name} = fields.Float(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0.0},\n    digits=(${7:16}, ${8:2}),\n    help=${9:False}\n)${0}\n",
		"description": "Common definition for field type Float"
	},
	"fields.Html": {
		"prefix": "fields.Html",
		"body": "\n${1:field_name} = fields.Html(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type HTML"
	},
	"fields.Integer": {
		"prefix": "fields.Integer",
		"body": "\n${1:field_name} = fields.Integer(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0},\n    help=${7:False}\n)${0}\n",
		"description": "Common definition for field type Integer"
	},
	"fields.Many2many": {
		"prefix": "fields.Many2many",
		"body": "\n${1:field_name} = fields.Many2many(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    comodel_name='${8:model.name}',\n    relation='${9:${8}_this_model_rel}',\n    column1='${10:${8}_id}',\n    column2='${11:this_model_id}',\n    domain=[${12}],\n    context=\\{${13}\\},\n    limit=${14:None}\n)${0}\n",
		"description": "Common definition for field type Many2many"
	},
	"fields.Many2one": {
		"prefix": "fields.Many2one",
		"body": "\n${1:field_name} = fields.Many2one(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    comodel_name='${8:model.name}',\n    domain=[${9}],\n    context=\\{${10}\\},\n    ondelete='${11:cascade}',\n    auto_join=${12:False}\n)${0}\n",
		"description": "Common definition for field type Many2one"
	},
	"fields.One2many": {
		"prefix": "fields.One2many",
		"body": "\n${1:field_name} = fields.One2many(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    comodel_name='${8:model.name}',\n    inverse_name='${9:inverse_field}',\n    domain=[${10}],\n    context=\\{${11}\\},\n    auto_join=${12:False},\n    limit=${13:None}\n)${0}\n",
		"description": "Common definition for field type One2Many"
	},
	"fields.Reference": {
		"prefix": "fields.Reference",
		"body": "\n${1:field_name} = fields.Reference(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:0},\n    help=${7:False},\n    selection=[('${8:model.name}', '${9:String}'),('${10:model.name}', '${11:String}')]\n)${0}\n",
		"description": "Common definition for field type Reference"
	},
	"fields.Selection": {
		"prefix": "fields.Selection",
		"body": "\n${1:field_name} = fields.Selection(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:False},\n    help=${7:False},\n    selection=[('${8:valor1}', '${9:${8}}'), ('${10:valor2}', '${11:${10}}')]\n)${0}\n",
		"description": "Common definition for field type Seleccion"
	},
	"fields.Text": {
		"prefix": "fields.Text",
		"body": "\n${1:field_name} = fields.Text(\n    string='${2:${1}}',\n    required=${3:False},\n    readonly=${4:False},\n    index=${5:False},\n    default=${6:None},\n    help=${7:False},\n    translate=${8:True}\n)${0}\n",
		"description": "Common definition for field type Text"
	},
	"compute": {
		"prefix": "compute",
		"body": "\ncompute=lambda self: self._compute_${1:field}()${0}\n",
		"description": "Field attribute: compute, lambda function"
	},
	"default": {
		"prefix": "default",
		"body": "\ndefault=lambda self: self._default_${1:field}()${0}\n",
		"description": "Field attribute: search, lambda function"
	},
	"default_model": {
		"prefix": "default_model",
		"body": "\ndefault_model='${1:model.name}'${0}\n",
		"description": "default_model attribute"
	},
	"inverse": {
		"prefix": "inverse",
		"body": "\ninverse=lambda self: self._inverse_${1:field}()${0}\n",
		"description": "Field attribute: inverse, lambda function"
	},
	"fullsearch": {
		"prefix": "fullsearch",
		"body": "\n${1:model_obj}.search(${2:args}${5:, offset=${4:0}}${7:, limit=${6:None}}${10:, order=${9:None}}${12:, context=${11:None}}${14:, count=${13:False}})\n",
		"description": ""
	},
	"track_visibility": {
		"prefix": "track_visibility",
		"body": "\ntrack_visibility='${1:onchange}'${0}\n",
		"description": "Field attribute: track_visibility"
	},
	"import": {
		"prefix": "import",
		"body": "\nfrom openerp import models, fields, api\nfrom openerp.tools.translate import _${0}\n",
		"description": "Common Python library import lines"
	},
	"_compute": {
		"prefix": "def _compute",
		"body": "\n@api.multi\n@api.depends('${1:depends}')\ndef _compute_${2:field}(self):\n    for record in self:\n        ${4:record.${2:field} = ${3:something}}\n${0}\n",
		"description": "_compute method signature"
	},
	"copy": {
		"prefix": "def copy",
		"body": "\n@api.one\ndef copy(self, default=None):\n    \"\"\"\n        Create a new record in ${1:ModelName} model from existing one\n        @param default: dict which contains the values to be override during\n        copy of object\n\n        @return: returns a id of newly created record\n    \"\"\"\n\n    result = super(${1:ModelName}, self).copy(default)${0}\n\n    return result\n",
		"description": "copy method signature"
	},
	"create": {
		"prefix": "def create",
		"body": "\n@api.model\ndef create(self, values):\n    \"\"\"\n        Create a new record for a model ${1:ModelName}\n        @param values: provides a data for new record\n\n        @return: returns a id of new record\n    \"\"\"\n\n    result = super(${1:Model_Name}, self).create(values)${0}\n\n    return result\n",
		"description": "create method signature"
	},
	"get_empty_list_help": {
		"prefix": "def get_empty_list_help",
		"body": "\n@api.model\ndef get_empty_list_help(self, help):\n    \"\"\" Generic method giving the help message displayed when having\n        no result to display in a list or kanban view.\n    \"\"\"\n\n    ${0:return help}\n",
		"description": "get_empty_list_help method signature"
	},
	"get_formview_id": {
		"prefix": "def get_formview_id",
		"body": "\n@api.one\n@api.returns('ir.ui.view')\ndef get_formview_id(self):\n    \"\"\" Return an view id to open the document with.\n\n        :param int id: id of the document to open\n    \"\"\"\n\n    ${0:return False}\n",
		"description": "get_formview_id method signature"
	},
	"init": {
		"prefix": "def init",
		"body": "\ndef init(self, cr):\n    \"\"\" Build database view which will be used as module origin\n\n        :param cr: database cursor\n    \"\"\"\n\n    self._sql_query = \"\"\"\n        SELECT\n            ROW_NUMBER() OVER() AS \"id\"\n    \"\"\"\n\n    drop_view_if_exists(cr, ${1:self._table})\n    cr.execute(\n        'create or replace view {} as ({})'.format(\n            ${1},\n            self._sql_query\n        )\n    )${0}\n",
		"description": "init method signature"
	},
	"_onchange": {
		"prefix": "def _onchange",
		"body": "\n@api.one\n@api.onchange('${1:field}')\ndef _onchange_${1}(self):\n    ${3:self.${2:field} = self.${1}}\n${0}\n",
		"description": "_onchange method signature, code"
	},
	"_onchange1": {
		"prefix": "def _onchange domain",
		"body": "\n@api.onchange('${1:field_name}')\ndef _onchange_${1}(self):\n    return {\n        'domain': {\n            '${2:field_name}': ${6:[('${3:field_name}', '${4:=}', ${5:self.${1}})]}\n        }\n    }${0}\n",
		"description": "_onchange method signature, domain"
	},
	"_onchange2": {
		"prefix": "def _onchange warning",
		"body": "\n@api.onchange('${1:field}')\ndef _onchange_${1}(self):\n    return {\n        'warning': {\n            'title': '${2:Text of the title}',\n            'message': '${3:Text of the message}'\n        }\n    }${0}\n",
		"description": "_onchange method signature, warning"
	},
	"_search": {
		"prefix": "def _search",
		"body": "\n@api.model\ndef _search_${1: field}(self, operator, value):\n    return [('${2:related}', operator, value)]${0}\n",
		"description": "_search method signature"
	},
	"unlink": {
		"prefix": "def unlink",
		"body": "\n@api.multi\ndef unlink(self):\n    \"\"\"\n        Delete all record(s) from recordset\n        return True on success, False otherwise\n\n        @return: True on success, False otherwise\n\n        #TODO: process before delete resource\n    \"\"\"\n\n    result = super(${1:ModelName}, self).unlink()${0}\n\n    return result\n",
		"description": "unlink method signature"
	},
	"view_header_get": {
		"prefix": "def view_header_get",
		"body": "\n@api.model\ndef view_header_get(self, view_id=None, view_type='form'):\n    \"\"\" Returns the window title which depends on the context \"\"\"\n\n    ${0:return False}\n",
		"description": "view_header_get method signature"
	},
	"view_init": {
		"prefix": "def view_init",
		"body": "\n@api.model\ndef view_init(self, fields_list):\n    \"\"\" Does specific things when a view on the object is opened \"\"\"\n\n    ${0:pass}\n",
		"description": "view_init method signature"
	},
	"write": {
		"prefix": "def write",
		"body": "\n@api.multi\ndef write(self, values):\n    \"\"\"\n        Update all record(s) in recordset, with new value comes as {values}\n        return True on success, False otherwise\n\n        @param values: dict of new values to be set\n\n        @return: True on success, False otherwise\n    \"\"\"\n\n    result = super(${1:Model_Name}, self).write(values)${0}\n\n    return result\n",
		"description": "write method signature"
	},
	"_browse": {
		"prefix": "def _browse",
		"body": "\n@classmethod\ndef _browse(cls, env, ids):\n    \"\"\" Returns a recordset for the ids provided as parameter in the current\n        environment.\n\n        Can take no ids, a single id or a sequence of ids.\n\n        :param cls: model class\n        :param env: environment\n        :param ids: none, a single id or a sequence of ids\n\n        :return: a recordset\n    \"\"\"\n\n    result = ${1:class_name}._browse(env, ids)\n    ${0}\n    return result\n",
		"description": "_browse method signature"
	},
	"_auto": {
		"prefix": "_auto",
		"body": "\n_auto = ${1:False}${0}\n",
		"description": "Adds the _auto attribute"
	},
	"_inherit": {
		"prefix": "_inherit",
		"body": "\n_inherit = ['${1:ir.model}'${2}]${0}\n",
		"description": "Model attribute _inherit with a module list"
	},
	"_inherits": {
		"prefix": "_inherits",
		"body": "\n_inherits = {'${1:model_name}': '${2:related_id}'${3}}${0}\n",
		"description": "Model attribute _inherits and single parent field"
	},
	"modelbrowse": {
		"prefix": "modelbrowse",
		"body": "\n${1:model}_obj = self.env['${2:model.name}']\n${1}_set = ${1}_obj.browse(${3:1})\n${0}\n",
		"description": ""
	},
	"modelsearch": {
		"prefix": "modelsearch",
		"body": "\n${1:model}_domain = [${2:('id', '=', 1)}]\n${1}_obj = self.env['${3:model.name}']\n${1}_set = ${1}_obj.search(${1}_domain)\n${0}\n",
		"description": ""
	},
	"_sql_constraints": {
		"prefix": "_sql_constraints",
		"body": "\n_sql_constraints = [\n    (\n        '${1:name}',\n        '${2:constraint}',\n        _(u'${3:message}')\n    )${4}\n]${0}\n",
		"description": "Module SQL contraints"
	},
	"super": {
		"prefix": "super",
		"body": "\nsuper(${1:Extension}, self).${2:handler}(${3})\n",
		"description": "Call Python parent class"
	},
	"_log": {
		"prefix": "_log",
		"body": "\ndef _log(self, level, msg_format, *args, **kwargs):\n    \"\"\" Outputs an formated string in log\n\n        :param level (int): 1=> debug, 2=> info, 3=> warning, 4=> error\n        :param message (basestring): name of the message\n    \"\"\"\n\n    methods = ['debug', 'info', 'warning', 'error']\n    log = getattr(_logger, methods[level])\n\n    msg = msg_format.format(*args, **kwargs)\n    log(msg)\n",
		"description": "Common _log method"
	},
	"addTypeEqualityFunc": {
		"prefix": "addTypeEqualityFunc",
		"body": "\naddTypeEqualityFunc(${1:typeobj}, ${2:function})\n",
		"description": "addTypeEqualityFunc"
	},
	"assertAlmostEqual": {
		"prefix": "assertAlmostEqual",
		"body": "\nassertAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${8:, ${7:delta=None}})\n",
		"description": "assertAlmostEqual"
	},
	"assertDictContainsSubset": {
		"prefix": "assertDictContainsSubset",
		"body": "\nassertDictContainsSubset(${1:expected}, ${2:actual}${4:, ${3:msg=None}})\n",
		"description": "assertDictContainsSubset"
	},
	"assertDictEqual": {
		"prefix": "assertDictEqual",
		"body": "\nassertDictEqual(${1:expected}, ${2:actual}${4:, ${3:msg=None}})\n",
		"description": "assertDictEqual"
	},
	"assertEqual": {
		"prefix": "assertEqual",
		"body": "\nassertEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertEqual"
	},
	"assertFalse": {
		"prefix": "assertFalse",
		"body": "\nassertFalse(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertFalse"
	},
	"assertGreater": {
		"prefix": "assertGreater",
		"body": "\nassertGreater(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertGreater"
	},
	"assertGreaterEqual": {
		"prefix": "assertGreaterEqual",
		"body": "\nassertGreaterEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertGreaterEqual"
	},
	"assertIn": {
		"prefix": "assertIn",
		"body": "\nassertIn(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertIn"
	},
	"assertIs": {
		"prefix": "assertIs",
		"body": "\nassertIs(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertIs"
	},
	"assertIsInstance": {
		"prefix": "assertIsInstance",
		"body": "\nassertIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})\n",
		"description": "assertIsInstance"
	},
	"assertIsNone": {
		"prefix": "assertIsNone",
		"body": "\nassertIsNone(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertIsNone"
	},
	"assertIsNot": {
		"prefix": "assertIsNot",
		"body": "\nassertIsNot(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertIsNot"
	},
	"assertIsNotNone": {
		"prefix": "assertIsNotNone",
		"body": "\nassertIsNotNone(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertIsNotNone"
	},
	"assertItemsEqual": {
		"prefix": "assertItemsEqual",
		"body": "\nassertItemsEqual(${1:actual}, ${2:expected}${4:, ${3:msg=None}})\n",
		"description": "assertItemsEqual"
	},
	"assertLess": {
		"prefix": "assertLess",
		"body": "\nassertLess(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertLess"
	},
	"assertLessEqual": {
		"prefix": "assertLessEqual",
		"body": "\nassertLessEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertLessEqual"
	},
	"assertListEqual": {
		"prefix": "assertListEqual",
		"body": "\nassertListEqual(${1:list1}, ${2:list2}${4:, ${3:msg=None}})\n",
		"description": "assertListEqual"
	},
	"assertMultiLineEqual": {
		"prefix": "assertMultiLineEqual",
		"body": "\nassertMultiLineEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertMultiLineEqual"
	},
	"assertNotAlmostEqual": {
		"prefix": "assertNotAlmostEqual",
		"body": "\nassertNotAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${9:, ${8:delta=None}})\n",
		"description": "assertNotAlmostEqual"
	},
	"assertNotEqual": {
		"prefix": "assertNotEqual",
		"body": "\nassertNotEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertNotEqual"
	},
	"assertNotIn": {
		"prefix": "assertNotIn",
		"body": "\nassertNotIn(${1:first}, ${2:second}${4:, ${3:msg=None}})\n",
		"description": "assertNotIn"
	},
	"assertNotIsInstance": {
		"prefix": "assertNotIsInstance",
		"body": "\nassertNotIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})\n",
		"description": "assertNotIsInstance"
	},
	"assertNotRegexpMatches": {
		"prefix": "assertNotRegexpMatches",
		"body": "\nassertNotRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})\n",
		"description": "assertNotRegexpMatches"
	},
	"assertRaises": {
		"prefix": "assertRaises",
		"body": "\nassertRaises(${1:exception}, ${2:callable}, ${3:*args}, ${4:**kwds})\n",
		"description": "assertRaises (extended)"
	},
	"assertRaises1": {
		"prefix": "assertRaises",
		"body": "\nassertRaises(${1:exception})\n",
		"description": "assertRaises"
	},
	"assertRaisesRegexp": {
		"prefix": "assertRaisesRegexp",
		"body": "\nassertRaisesRegexp(${1:exception}, ${2:regexp}, ${3:callable}, ${4:*args}, ${5:**kwds})\n",
		"description": "assertRaisesRegexp (extended)"
	},
	"assertRaisesRegexp1": {
		"prefix": "assertRaisesRegexp",
		"body": "\nassertRaisesRegexp(${1:exception}, ${2:regexp})\n",
		"description": "assertRaisesRegexp"
	},
	"assertRegexpMatches": {
		"prefix": "assertRegexpMatches",
		"body": "\nassertRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})\n",
		"description": "assertRegexpMatches"
	},
	"assertSequenceEqual": {
		"prefix": "assertSequenceEqual",
		"body": "\nassertSequenceEqual(${1:seq1}, ${2:seq2}${4:, ${3:msg=None}}${6:, ${5:seq_type=None}})\n",
		"description": "assertSequenceEqual"
	},
	"assertSetEqual": {
		"prefix": "assertSetEqual",
		"body": "\nassertSetEqual(${1:set1}, ${2:set2}${4:, ${3:msg=None}})\n",
		"description": "assertSetEqual"
	},
	"assertTrue": {
		"prefix": "assertTrue",
		"body": "\nassertTrue(${1:expr}${3:, ${2:msg=None}})\n",
		"description": "assertTrue"
	},
	"assertTupleEqual": {
		"prefix": "assertTupleEqual",
		"body": "\nassertTupleEqual(${1:tuple1}, ${2:tuple2}${4:, ${3:msg=None}})\n",
		"description": "assertTupleEqual"
	},
	"fail": {
		"prefix": "fail",
		"body": "\nfail(${1:msg=None})\n",
		"description": "fail"
	},
	"test": {
		"prefix": "def test",
		"body": "\ndef test_${1:item_name}(self):\n    \"\"\" Checks if the ${1} works properly\n    \"\"\"\n\n    ${0:pass}\n",
		"description": "Test case method"
	},
	"TransactionCase": {
		"prefix": "TransactionCase",
		"body": "\nfrom openerp.tests.common import TransactionCase\n\n\nclass ${1:ModelName}(TransactionCase):\n    \"\"\" ${2:This class contains the unit tests for '${1}'.}\n\n        Tests:\n          - ${3}: Checks if the ${3} works properly\n    \"\"\"\n\n    def setUp(self):\n        super(${1}, self).setUp()\n\n    def test_${3:item_name}(self):\n        \"\"\" Checks if the ${3} works properly \"\"\"\n\n        ${0:pass}\n",
		"description": ""
	},
	"__init__": {
		"prefix": "__init__",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#    License, author and contributors information in:                         #\n#    __openerp__.py file at the root folder of this module.                   #\n###############################################################################\n\nfrom . import ${1:models}${0}\n",
		"description": ""
	},
	"__openerp__": {
		"prefix": "__openerp__",
		"body": "\n# -*- coding: utf-8 -*-\n###############################################################################\n#\n#    Odoo, Open Source Management Solution\n#\n#    Copyright (c) All rights reserved:\n#        (c) 2015  $TM_FULLNAME\n#\n#    This program is free software: you can redistribute it and/or modify\n#    it under the terms of the GNU Affero General Public License as\n#    published by the Free Software Foundation, either version 3 of the\n#    License, or (at your option) any later version.\n#\n#    This program is distributed in the hope that it will be useful,\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n#    GNU Affero General Public License for more details.\n#\n#    You should have received a copy of the GNU Affero General Public License\n#    along with this program.  If not, see http://www.gnu.org/licenses\n#\n###############################################################################\n{\n    'name': '${1:Human readable name}',\n    'summary': '${2:${1}} Module Project',\n    'version': '1.0',\n\n    'description': \"\"\"\n${3:${1}} Module Project.\n==============================================\n\n${4}\n    \"\"\",\n\n    'author': '${5:$TM_FULLNAME}',\n    'maintainer': '${5}',\n    'contributors': ['${6:${5} <${5}@gmail.com>}'],\n\n    'website': 'http://www.gitlab.com/${7:${5}}',\n\n    'license': 'AGPL-3',\n    'category': 'Uncategorized',\n\n    'depends': [\n        'base'\n    ],\n    'external_dependencies': {\n        'python': [\n        ],\n    },\n    'data': [\n    ],\n    'demo': [\n    ],\n    'js': [\n    ],\n    'css': [\n    ],\n    'qweb': [\n    ],\n    'images': [\n    ],\n    'test': [\n    ],\n\n    'installable': True\n}${0}\n",
		"description": "Odoo manifest file common structure"
	}
}
