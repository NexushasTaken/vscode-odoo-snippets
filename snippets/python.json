{
    "__init__": {
        "prefix": "__init__", 
        "body": "
# -*- coding: utf-8 -*-
###############################################################################
#    License, author and contributors information in:                         #
#    __openerp__.py file at the root folder of this module.                   #
###############################################################################

from . import ${1:models}${0}
", 
        "description": ""
    }, 
    "__openerp__": {
        "prefix": "__openerp__", 
        "body": "
# -*- coding: utf-8 -*-
###############################################################################
#
#    Odoo, Open Source Management Solution
#
#    Copyright (c) All rights reserved:
#        (c) 2015  $TM_FULLNAME
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see http://www.gnu.org/licenses
#
###############################################################################
{
    'name': '${1:Human readable name}',
    'summary': '${2:${1}} Module Project',
    'version': '1.0',

    'description': \"\"\"
${3:${1}} Module Project.
==============================================

${4}
    \"\"\",

    'author': '${5:$TM_FULLNAME}',
    'maintainer': '${5}',
    'contributors': ['${6:${5} <${5}@gmail.com>}'],

    'website': 'http://www.gitlab.com/${7:${5}}',

    'license': 'AGPL-3',
    'category': 'Uncategorized',

    'depends': [
        'base'
    ],
    'external_dependencies': {
        'python': [
        ],
    },
    'data': [
    ],
    'demo': [
    ],
    'js': [
    ],
    'css': [
    ],
    'qweb': [
    ],
    'images': [
    ],
    'test': [
    ],

    'installable': True
}${0}
", 
        "description": "Odoo manifest file common structure"
    }, 
    "odoo": {
        "prefix": "odoo", 
        "body": "
# -*- coding: utf-8 -*-
###############################################################################
#    License, author and contributors information in:                         #
#    __openerp__.py file at the root folder of this module.                   #
###############################################################################

from openerp import models, fields, api
from openerp.tools.translate import _
from logging import getLogger


_logger = getLogger(__name__)


${0}
", 
        "description": "Odoo Python module file"
    }, 
    "controller": {
        "prefix": "controller", 
        "body": "
class ${1:ControllerName}(Controller):
    \"\"\" ${2:The summary line for a class docstring should fit on one line.}

        Routes:
          /${3:some_url}: ${4:url description}
    \"\"\"

    @route('/${3}', type='${5:http}', auth='${6:none}')
    def ${3/((^[A-Z])|([^a-zA-Z]))/(?2:\\l$2)(?3:\\_)/g}(self${7:, **kw}):

        pass${0}
", 
        "description": "Controller"
    }, 
    "models.Model": {
        "prefix": "models.Model", 
        "body": "
class ${1:ModelName}(models.Model):
    \"\"\" ${2:The summary line for a class docstring should fit on one line.}

    Fields:
      name (Char): Human readable name which will identify each record.

    \"\"\"

    _name = '${3:${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}}'
    _description = u'${4:${1/((^[A-Z])|([A-Z]))/(?2:\\u$2)(?3:\\ \\l$3)/g}}'

    _rec_name = 'name'
    _order = 'name ASC'

    name = fields.Char(
        string='Name',
        required=True,
        readonly=False,
        index=True,
        default=None,
        help=False,
        size=50,
        translate=True
    )${0}
", 
        "description": "Odoo generic model class"
    }, 
    "fields.Binary": {
        "prefix": "fields.Binary", 
        "body": "
${1:field_name} = fields.Binary(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:0},
    help=${7:False}
)${0}
", 
        "description": "Common definition for field type Binary"
    }, 
    "fields.Boolean": {
        "prefix": "fields.Boolean", 
        "body": "
${1:field_name} = fields.Boolean(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:False},
    help=${7:False}
)${0}
", 
        "description": "Common definition for field type Boolean"
    }, 
    "fields.Char": {
        "prefix": "fields.Char", 
        "body": "
${1:field_name} = fields.Char(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:None},
    help=${7:False},
    size=${8:50},
    translate=${9:True}
)${0}
", 
        "description": "Common definition for field type Char"
    }, 
    "fields.Date": {
        "prefix": "fields.Date", 
        "body": "
${1:field_name} = fields.Date(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:fields.Date.context_today()},
    help=${7:False}
)${0}
", 
        "description": "Common definition for field type Date"
    }, 
    "fields.Datetime": {
        "prefix": "fields.Datetime", 
        "body": "
${1:field_name} = fields.Datetime(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:fields.datetime.now()},
    help=${7:False}
)${0}
", 
        "description": "Common definition for field type Datetime"
    }, 
    "fields.Float": {
        "prefix": "fields.Float", 
        "body": "
${1:field_name} = fields.Float(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:0.0},
    digits=(${7:16}, ${8:2}),
    help=${9:False}
)${0}
", 
        "description": "Common definition for field type Float"
    }, 
    "fields.Html": {
        "prefix": "fields.Html", 
        "body": "
${1:field_name} = fields.Html(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:None},
    help=${7:False}
)${0}
", 
        "description": "Common definition for field type HTML"
    }, 
    "fields.Integer": {
        "prefix": "fields.Integer", 
        "body": "
${1:field_name} = fields.Integer(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:0},
    help=${7:False}
)${0}
", 
        "description": "Common definition for field type Integer"
    }, 
    "fields.Many2many": {
        "prefix": "fields.Many2many", 
        "body": "
${1:field_name} = fields.Many2many(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:None},
    help=${7:False},
    comodel_name='${8:model.name}',
    relation='${9:${8/\\./_/g}_this_model_rel}',
    column1='${10:${8/\\./_/g}_id}',
    column2='${11:this_model_id}',
    domain=[${12}],
    context=\\{${13}\\},
    limit=${14:None}
)${0}
", 
        "description": "Common definition for field type Many2many"
    }, 
    "fields.Many2one": {
        "prefix": "fields.Many2one", 
        "body": "
${1:field_name} = fields.Many2one(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:None},
    help=${7:False},
    comodel_name='${8:model.name}',
    domain=[${9}],
    context=\\{${10}\\},
    ondelete='${11:cascade}',
    auto_join=${12:False}
)${0}
", 
        "description": "Common definition for field type Many2one"
    }, 
    "fields.One2many": {
        "prefix": "fields.One2many", 
        "body": "
${1:field_name} = fields.One2many(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:None},
    help=${7:False},
    comodel_name='${8:model.name}',
    inverse_name='${9:inverse_field}',
    domain=[${10}],
    context=\\{${11}\\},
    auto_join=${12:False},
    limit=${13:None}
)${0}
", 
        "description": "Common definition for field type One2Many"
    }, 
    "fields.Reference": {
        "prefix": "fields.Reference", 
        "body": "
${1:field_name} = fields.Reference(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:0},
    help=${7:False},
    selection=[('${8:model.name}', '${9:String}'),('${10:model.name}', '${11:String}')]
)${0}
", 
        "description": "Common definition for field type Reference"
    }, 
    "fields.Selection": {
        "prefix": "fields.Selection", 
        "body": "
${1:field_name} = fields.Selection(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:False},
    help=${7:False},
    selection=[('${8:valor1}', '${9:${8/(.)(.+)/\\u$1$2/g}}'), ('${10:valor2}', '${11:${10/(.)(.+)/\\u$1$2/g}}')]
)${0}
", 
        "description": "Common definition for field type Seleccion"
    }, 
    "fields.Text": {
        "prefix": "fields.Text", 
        "body": "
${1:field_name} = fields.Text(
    string='${2:${1/((^.)|(_(.)))/(?2:\\u$2)(?3:\\ $4)/g}}',
    required=${3:False},
    readonly=${4:False},
    index=${5:False},
    default=${6:None},
    help=${7:False},
    translate=${8:True}
)${0}
", 
        "description": "Common definition for field type Text"
    }, 
    "compute": {
        "prefix": "compute", 
        "body": "
compute=lambda self: self._compute_${1:field}()${0}
", 
        "description": "Field attribute: compute, lambda function"
    }, 
    "default": {
        "prefix": "default", 
        "body": "
default=lambda self: self._default_${1:field}()${0}
", 
        "description": "Field attribute: search, lambda function"
    }, 
    "default_model": {
        "prefix": "default_model", 
        "body": "
default_model='${1:model.name}'${0}
", 
        "description": "default_model attribute"
    }, 
    "inverse": {
        "prefix": "inverse", 
        "body": "
inverse=lambda self: self._inverse_${1:field}()${0}
", 
        "description": "Field attribute: inverse, lambda function"
    }, 
    "fullsearch": {
        "prefix": "fullsearch", 
        "body": "
${1:model_obj}.search(${2:args}${5:, offset=${4:0}}${7:, limit=${6:None}}${10:, order=${9:None}}${12:, context=${11:None}}${14:, count=${13:False}})
", 
        "description": ""
    }, 
    "track_visibility": {
        "prefix": "track_visibility", 
        "body": "
track_visibility='${1:onchange}'${0}
", 
        "description": "Field attribute: track_visibility"
    }, 
    "import": {
        "prefix": "import", 
        "body": "
from openerp import models, fields, api
from openerp.tools.translate import _${0}
", 
        "description": "Common Python library import lines"
    }, 
    "_compute": {
        "prefix": "_compute", 
        "body": "
@api.multi
@api.depends('${1:depends}')
def _compute_${2:field}(self):
    for record in self:
        ${4:record.${2:field} = ${3:something}}
${0}
", 
        "description": "_compute method signature"
    }, 
    "def": {
        "prefix": "def", 
        "body": "
@api.one
def copy(self, default=None):
    \"\"\"
        Create a new record in ${1:ModelName} model from existing one
        @param default: dict which contains the values to be override during
        copy of object

        @return: returns a id of newly created record
    \"\"\"

    result = super(${1:ModelName}, self).copy(default)${0}

    return result
", 
        "description": "copy method signature"
    }, 
    "crud": {
        "prefix": "crud", 
        "body": "
@api.model
def create(self, values):
    \"\"\"
        Create a new record for a model ${1:ModelName}
        @param values: provides a data for new record

        @return: returns a id of new record
    \"\"\"

    result = super(${1:Model_Name}, self).create(values)${0}

    return result
", 
        "description": "create method signature"
    }, 
    "def1": {
        "prefix": "def", 
        "body": "
@api.model
def get_empty_list_help(self, help):
    \"\"\" Generic method giving the help message displayed when having
        no result to display in a list or kanban view.
    \"\"\"

    ${0:return help}
", 
        "description": "get_empty_list_help method signature"
    }, 
    "def2": {
        "prefix": "def", 
        "body": "
@api.one
@api.returns('ir.ui.view')
def get_formview_id(self):
    \"\"\" Return an view id to open the document with.

        :param int id: id of the document to open
    \"\"\"

    ${0:return False}
", 
        "description": "get_formview_id method signature"
    }, 
    "def3": {
        "prefix": "def", 
        "body": "
def init(self, cr):
    \"\"\" Build database view which will be used as module origin

        :param cr: database cursor
    \"\"\"

    self._sql_query = \"\"\"
        SELECT
            ROW_NUMBER() OVER() AS \"id\"
    \"\"\"

    drop_view_if_exists(cr, ${1:self._table})
    cr.execute(
        'create or replace view {} as ({})'.format(
            ${1},
            self._sql_query
        )
    )${0}
", 
        "description": "init method signature"
    }, 
    "_onchange": {
        "prefix": "_onchange", 
        "body": "
@api.one
@api.onchange('${1:field}')
def _onchange_${1}(self):
    ${3:self.${2:field} = self.${1}}
${0}
", 
        "description": "_onchange method signature, code"
    }, 
    "_onchange1": {
        "prefix": "_onchange", 
        "body": "
@api.onchange('${1:field_name}')
def _onchange_${1}(self):
    return {
        'domain': {
            '${2:field_name}': ${6:[('${3:field_name}', '${4:=}', ${5:self.${1}})]}
        }
    }${0}
", 
        "description": "_onchange method signature, domain"
    }, 
    "_onchange2": {
        "prefix": "_onchange", 
        "body": "
@api.onchange('${1:field}')
def _onchange_${1}(self):
    return {
        'warning': {
            'title': '${2:Text of the title}',
            'message': '${3:Text of the message}'
        }
    }${0}
", 
        "description": "_onchange method signature, warning"
    }, 
    "_search": {
        "prefix": "_search", 
        "body": "
@api.model
def _search_${1: field}(self, operator, value):
    return [('${2:related}', operator, value)]${0}
", 
        "description": "_search method signature"
    }, 
    "crud1": {
        "prefix": "crud", 
        "body": "
@api.multi
def unlink(self):
    \"\"\"
        Delete all record(s) from recordset
        return True on success, False otherwise

        @return: True on success, False otherwise

        #TODO: process before delete resource
    \"\"\"

    result = super(${1:ModelName}, self).unlink()${0}

    return result
", 
        "description": "unlink method signature"
    }, 
    "def4": {
        "prefix": "def", 
        "body": "
@api.model
def view_header_get(self, view_id=None, view_type='form'):
    \"\"\" Returns the window title which depends on the context \"\"\"

    ${0:return False}
", 
        "description": "view_header_get method signature"
    }, 
    "def5": {
        "prefix": "def", 
        "body": "
@api.model
def view_init(self, fields_list):
    \"\"\" Does specific things when a view on the object is opened \"\"\"

    ${0:pass}
", 
        "description": "view_init method signature"
    }, 
    "crud2": {
        "prefix": "crud", 
        "body": "
@api.multi
def write(self, values):
    \"\"\"
        Update all record(s) in recordset, with new value comes as {values}
        return True on success, False otherwise

        @param values: dict of new values to be set

        @return: True on success, False otherwise
    \"\"\"

    result = super(${1:Model_Name}, self).write(values)${0}

    return result
", 
        "description": "write method signature"
    }, 
    "crud3": {
        "prefix": "crud", 
        "body": "
@classmethod
def _browse(cls, env, ids):
    \"\"\" Returns a recordset for the ids provided as parameter in the current
        environment.

        Can take no ids, a single id or a sequence of ids.

        :param cls: model class
        :param env: environment
        :param ids: none, a single id or a sequence of ids

        :return: a recordset
    \"\"\"

    result = ${1:class_name}._browse(env, ids)
    ${0}
    return result
", 
        "description": "_browse method signature"
    }, 
    "_auto": {
        "prefix": "_auto", 
        "body": "
_auto = ${1:False}${0}
", 
        "description": "Adds the _auto attribute"
    }, 
    "_inherit": {
        "prefix": "_inherit", 
        "body": "
_inherit = ['${1:ir.model}'${2}]${0}
", 
        "description": "Model attribute _inherit with a module list"
    }, 
    "_inherits": {
        "prefix": "_inherits", 
        "body": "
_inherits = {'${1:model_name}': '${2:related_id}'${3}}${0}
", 
        "description": "Model attribute _inherits and single parent field"
    }, 
    "modelbrowse": {
        "prefix": "modelbrowse", 
        "body": "
${1:model}_obj = self.env['${2:model.name}']
${1}_set = ${1}_obj.browse(${3:1})
${0}
", 
        "description": ""
    }, 
    "modelsearch": {
        "prefix": "modelsearch", 
        "body": "
${1:model}_domain = [${2:('id', '=', 1)}]
${1}_obj = self.env['${3:model.name}']
${1}_set = ${1}_obj.search(${1}_domain)
${0}
", 
        "description": ""
    }, 
    "_sql_constraints": {
        "prefix": "_sql_constraints", 
        "body": "
_sql_constraints = [
    (
        '${1:name}',
        '${2:constraint}',
        _(u'${3:message}')
    )${4}
]${0}
", 
        "description": "Module SQL contraints"
    }, 
    "super": {
        "prefix": "super", 
        "body": "
super(${1:Extension}, self).${2:handler}(${3})
", 
        "description": "Call Python parent class"
    }, 
    "_log": {
        "prefix": "_log", 
        "body": "
def _log(self, level, msg_format, *args, **kwargs):
    \"\"\" Outputs an formated string in log

        :param level (int): 1=> debug, 2=> info, 3=> warning, 4=> error
        :param message (basestring): name of the message
    \"\"\"

    methods = ['debug', 'info', 'warning', 'error']
    log = getattr(_logger, methods[level])

    msg = msg_format.format(*args, **kwargs)
    log(msg)
", 
        "description": "Common _log method"
    }, 
    "addTypeEqualityFunc": {
        "prefix": "addTypeEqualityFunc", 
        "body": "
addTypeEqualityFunc(${1:typeobj}, ${2:function})
", 
        "description": "addTypeEqualityFunc"
    }, 
    "assertAlmostEqual": {
        "prefix": "assertAlmostEqual", 
        "body": "
assertAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${8:, ${7:delta=None}})
", 
        "description": "assertAlmostEqual"
    }, 
    "assertDictContainsSubset": {
        "prefix": "assertDictContainsSubset", 
        "body": "
assertDictContainsSubset(${1:expected}, ${2:actual}${4:, ${3:msg=None}})
", 
        "description": "assertDictContainsSubset"
    }, 
    "assertDictEqual": {
        "prefix": "assertDictEqual", 
        "body": "
assertDictEqual(${1:expected}, ${2:actual}${4:, ${3:msg=None}})
", 
        "description": "assertDictEqual"
    }, 
    "assertEqual": {
        "prefix": "assertEqual", 
        "body": "
assertEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertEqual"
    }, 
    "assertFalse": {
        "prefix": "assertFalse", 
        "body": "
assertFalse(${1:expr}${3:, ${2:msg=None}})
", 
        "description": "assertFalse"
    }, 
    "assertGreater": {
        "prefix": "assertGreater", 
        "body": "
assertGreater(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertGreater"
    }, 
    "assertGreaterEqual": {
        "prefix": "assertGreaterEqual", 
        "body": "
assertGreaterEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertGreaterEqual"
    }, 
    "assertIn": {
        "prefix": "assertIn", 
        "body": "
assertIn(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertIn"
    }, 
    "assertIs": {
        "prefix": "assertIs", 
        "body": "
assertIs(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertIs"
    }, 
    "assertIsInstance": {
        "prefix": "assertIsInstance", 
        "body": "
assertIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})
", 
        "description": "assertIsInstance"
    }, 
    "assertIsNone": {
        "prefix": "assertIsNone", 
        "body": "
assertIsNone(${1:expr}${3:, ${2:msg=None}})
", 
        "description": "assertIsNone"
    }, 
    "assertIsNot": {
        "prefix": "assertIsNot", 
        "body": "
assertIsNot(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertIsNot"
    }, 
    "assertIsNotNone": {
        "prefix": "assertIsNotNone", 
        "body": "
assertIsNotNone(${1:expr}${3:, ${2:msg=None}})
", 
        "description": "assertIsNotNone"
    }, 
    "assertItemsEqual": {
        "prefix": "assertItemsEqual", 
        "body": "
assertItemsEqual(${1:actual}, ${2:expected}${4:, ${3:msg=None}})
", 
        "description": "assertItemsEqual"
    }, 
    "assertLess": {
        "prefix": "assertLess", 
        "body": "
assertLess(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertLess"
    }, 
    "assertLessEqual": {
        "prefix": "assertLessEqual", 
        "body": "
assertLessEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertLessEqual"
    }, 
    "assertListEqual": {
        "prefix": "assertListEqual", 
        "body": "
assertListEqual(${1:list1}, ${2:list2}${4:, ${3:msg=None}})
", 
        "description": "assertListEqual"
    }, 
    "assertMultiLineEqual": {
        "prefix": "assertMultiLineEqual", 
        "body": "
assertMultiLineEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertMultiLineEqual"
    }, 
    "assertNotAlmostEqual": {
        "prefix": "assertNotAlmostEqual", 
        "body": "
assertNotAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${9:, ${8:delta=None}})
", 
        "description": "assertNotAlmostEqual"
    }, 
    "assertNotEqual": {
        "prefix": "assertNotEqual", 
        "body": "
assertNotEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertNotEqual"
    }, 
    "assertNotIn": {
        "prefix": "assertNotIn", 
        "body": "
assertNotIn(${1:first}, ${2:second}${4:, ${3:msg=None}})
", 
        "description": "assertNotIn"
    }, 
    "assertNotIsInstance": {
        "prefix": "assertNotIsInstance", 
        "body": "
assertNotIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})
", 
        "description": "assertNotIsInstance"
    }, 
    "assertNotRegexpMatches": {
        "prefix": "assertNotRegexpMatches", 
        "body": "
assertNotRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})
", 
        "description": "assertNotRegexpMatches"
    }, 
    "assertRaises": {
        "prefix": "assertRaises", 
        "body": "
assertRaises(${1:exception}, ${2:callable}, ${3:*args}, ${4:**kwds})
", 
        "description": "assertRaises (extended)"
    }, 
    "assertRaises1": {
        "prefix": "assertRaises", 
        "body": "
assertRaises(${1:exception})
", 
        "description": "assertRaises"
    }, 
    "assertRaisesRegexp": {
        "prefix": "assertRaisesRegexp", 
        "body": "
assertRaisesRegexp(${1:exception}, ${2:regexp}, ${3:callable}, ${4:*args}, ${5:**kwds})
", 
        "description": "assertRaisesRegexp (extended)"
    }, 
    "assertRaisesRegexp1": {
        "prefix": "assertRaisesRegexp", 
        "body": "
assertRaisesRegexp(${1:exception}, ${2:regexp})
", 
        "description": "assertRaisesRegexp"
    }, 
    "assertRegexpMatches": {
        "prefix": "assertRegexpMatches", 
        "body": "
assertRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})
", 
        "description": "assertRegexpMatches"
    }, 
    "assertSequenceEqual": {
        "prefix": "assertSequenceEqual", 
        "body": "
assertSequenceEqual(${1:seq1}, ${2:seq2}${4:, ${3:msg=None}}${6:, ${5:seq_type=None}})
", 
        "description": "assertSequenceEqual"
    }, 
    "assertSetEqual": {
        "prefix": "assertSetEqual", 
        "body": "
assertSetEqual(${1:set1}, ${2:set2}${4:, ${3:msg=None}})
", 
        "description": "assertSetEqual"
    }, 
    "assertTrue": {
        "prefix": "assertTrue", 
        "body": "
assertTrue(${1:expr}${3:, ${2:msg=None}})
", 
        "description": "assertTrue"
    }, 
    "assertTupleEqual": {
        "prefix": "assertTupleEqual", 
        "body": "
assertTupleEqual(${1:tuple1}, ${2:tuple2}${4:, ${3:msg=None}})
", 
        "description": "assertTupleEqual"
    }, 
    "fail": {
        "prefix": "fail", 
        "body": "
fail(${1:msg=None})
", 
        "description": "fail"
    }, 
    "test": {
        "prefix": "test", 
        "body": "
def test_${1:item_name}(self):
    \"\"\" Checks if the ${1} works properly
    \"\"\"

    ${0:pass}
", 
        "description": "Test case method"
    }, 
    "TransactionCase": {
        "prefix": "TransactionCase", 
        "body": "
from openerp.tests.common import TransactionCase


class ${1:ModelName}(TransactionCase):
    \"\"\" ${2:This class contains the unit tests for '${1/((^[A-Z])|([A-Z]))/(?2:\\l$2)(?3:\\.\\l$3)/g}'.}

        Tests:
          - ${3}: Checks if the ${3} works properly
    \"\"\"

    def setUp(self):
        super(${1}, self).setUp()

    def test_${3:item_name}(self):
        \"\"\" Checks if the ${3} works properly \"\"\"

        ${0:pass}
", 
        "description": ""
    }
}