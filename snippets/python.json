{
    "TransactionCase": {
        "body": [
            "",
            "from openerp.tests.common import TransactionCase",
            "",
            "",
            "class ${1:ModelName}(TransactionCase):",
            "    \"\"\" ${2:This class contains the unit tests for '${1/(.+?)([A-Z])/${1:/downcase}.${2:/downcase}/g}'.}",
            "",
            "        Tests:",
            "          - ${3}: Checks if the ${3} works properly",
            "    \"\"\"",
            "",
            "    def setUp(self):",
            "        super(${1}, self).setUp()",
            "",
            "    def test_${3:item_name}(self):",
            "        \"\"\" Checks if the ${3} works properly \"\"\"",
            "",
            "        ${0:pass}",
            ""
        ],
        "description": "",
        "prefix": "TransactionCase"
    },
    "addTypeEqualityFunc": {
        "body": [
            "",
            "addTypeEqualityFunc(${1:typeobj}, ${2:function})",
            ""
        ],
        "description": "addTypeEqualityFunc",
        "prefix": "addTypeEqualityFunc"
    },
    "api/depends": {
        "body": [
            "",
            "@api.depends('${1:field}')",
            ""
        ],
        "description": "decorator depends",
        "prefix": "api/depends"
    },
    "assertAlmostEqual": {
        "body": [
            "",
            "assertAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${8:, ${7:delta=None}})",
            ""
        ],
        "description": "assertAlmostEqual",
        "prefix": "assertAlmostEqual"
    },
    "assertDictContainsSubset": {
        "body": [
            "",
            "assertDictContainsSubset(${1:expected}, ${2:actual}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertDictContainsSubset",
        "prefix": "assertDictContainsSubset"
    },
    "assertDictEqual": {
        "body": [
            "",
            "assertDictEqual(${1:expected}, ${2:actual}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertDictEqual",
        "prefix": "assertDictEqual"
    },
    "assertEqual": {
        "body": [
            "",
            "assertEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertEqual",
        "prefix": "assertEqual"
    },
    "assertFalse": {
        "body": [
            "",
            "assertFalse(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertFalse",
        "prefix": "assertFalse"
    },
    "assertGreater": {
        "body": [
            "",
            "assertGreater(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertGreater",
        "prefix": "assertGreater"
    },
    "assertGreaterEqual": {
        "body": [
            "",
            "assertGreaterEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertGreaterEqual",
        "prefix": "assertGreaterEqual"
    },
    "assertIn": {
        "body": [
            "",
            "assertIn(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIn",
        "prefix": "assertIn"
    },
    "assertIs": {
        "body": [
            "",
            "assertIs(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIs",
        "prefix": "assertIs"
    },
    "assertIsInstance": {
        "body": [
            "",
            "assertIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIsInstance",
        "prefix": "assertIsInstance"
    },
    "assertIsNone": {
        "body": [
            "",
            "assertIsNone(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertIsNone",
        "prefix": "assertIsNone"
    },
    "assertIsNot": {
        "body": [
            "",
            "assertIsNot(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertIsNot",
        "prefix": "assertIsNot"
    },
    "assertIsNotNone": {
        "body": [
            "",
            "assertIsNotNone(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertIsNotNone",
        "prefix": "assertIsNotNone"
    },
    "assertItemsEqual": {
        "body": [
            "",
            "assertItemsEqual(${1:actual}, ${2:expected}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertItemsEqual",
        "prefix": "assertItemsEqual"
    },
    "assertLess": {
        "body": [
            "",
            "assertLess(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertLess",
        "prefix": "assertLess"
    },
    "assertLessEqual": {
        "body": [
            "",
            "assertLessEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertLessEqual",
        "prefix": "assertLessEqual"
    },
    "assertListEqual": {
        "body": [
            "",
            "assertListEqual(${1:list1}, ${2:list2}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertListEqual",
        "prefix": "assertListEqual"
    },
    "assertMultiLineEqual": {
        "body": [
            "",
            "assertMultiLineEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertMultiLineEqual",
        "prefix": "assertMultiLineEqual"
    },
    "assertNotAlmostEqual": {
        "body": [
            "",
            "assertNotAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${9:, ${8:delta=None}})",
            ""
        ],
        "description": "assertNotAlmostEqual",
        "prefix": "assertNotAlmostEqual"
    },
    "assertNotEqual": {
        "body": [
            "",
            "assertNotEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotEqual",
        "prefix": "assertNotEqual"
    },
    "assertNotIn": {
        "body": [
            "",
            "assertNotIn(${1:first}, ${2:second}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotIn",
        "prefix": "assertNotIn"
    },
    "assertNotIsInstance": {
        "body": [
            "",
            "assertNotIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotIsInstance",
        "prefix": "assertNotIsInstance"
    },
    "assertNotRegexpMatches": {
        "body": [
            "",
            "assertNotRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertNotRegexpMatches",
        "prefix": "assertNotRegexpMatches"
    },
    "assertRaises": {
        "body": [
            "",
            "assertRaises(${1:exception}, ${2:callable}, ${3:*args}, ${4:**kwds})",
            ""
        ],
        "description": "assertRaises (extended)",
        "prefix": "assertRaises"
    },
    "assertRaises1": {
        "body": [
            "",
            "assertRaises(${1:exception})",
            ""
        ],
        "description": "assertRaises",
        "prefix": "assertRaises"
    },
    "assertRaisesRegexp": {
        "body": [
            "",
            "assertRaisesRegexp(${1:exception}, ${2:regexp}, ${3:callable}, ${4:*args}, ${5:**kwds})",
            ""
        ],
        "description": "assertRaisesRegexp (extended)",
        "prefix": "assertRaisesRegexp"
    },
    "assertRaisesRegexp1": {
        "body": [
            "",
            "assertRaisesRegexp(${1:exception}, ${2:regexp})",
            ""
        ],
        "description": "assertRaisesRegexp",
        "prefix": "assertRaisesRegexp"
    },
    "assertRegexpMatches": {
        "body": [
            "",
            "assertRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertRegexpMatches",
        "prefix": "assertRegexpMatches"
    },
    "assertSequenceEqual": {
        "body": [
            "",
            "assertSequenceEqual(${1:seq1}, ${2:seq2}${4:, ${3:msg=None}}${6:, ${5:seq_type=None}})",
            ""
        ],
        "description": "assertSequenceEqual",
        "prefix": "assertSequenceEqual"
    },
    "assertSetEqual": {
        "body": [
            "",
            "assertSetEqual(${1:set1}, ${2:set2}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertSetEqual",
        "prefix": "assertSetEqual"
    },
    "assertTrue": {
        "body": [
            "",
            "assertTrue(${1:expr}${3:, ${2:msg=None}})",
            ""
        ],
        "description": "assertTrue",
        "prefix": "assertTrue"
    },
    "assertTupleEqual": {
        "body": [
            "",
            "assertTupleEqual(${1:tuple1}, ${2:tuple2}${4:, ${3:msg=None}})",
            ""
        ],
        "description": "assertTupleEqual",
        "prefix": "assertTupleEqual"
    },
    "attr/_auto": {
        "body": [
            "",
            "_auto = ${1:False}${0}",
            ""
        ],
        "description": "Adds the _auto attribute",
        "prefix": "attr/_auto"
    },
    "attr/_inherit": {
        "body": [
            "",
            "_inherit = ['${1:ir.model}'${2}]${0}",
            ""
        ],
        "description": "Model attribute _inherit with a module list",
        "prefix": "attr/_inherit"
    },
    "attr/_inherits": {
        "body": [
            "",
            "_inherits = {'${1:model_name}': '${2:related_id}'}${0}",
            ""
        ],
        "description": "Model attribute _inherits and single parent field",
        "prefix": "attr/_inherits"
    },
    "auto_join": {
        "body": [
            "",
            "auto_join=${1:False}${0}",
            ""
        ],
        "description": "Field attribute: auto_join",
        "prefix": "auto_join"
    },
    "comodel_name": {
        "body": [
            "",
            "comodel_name='${1:model_name}'${0}",
            ""
        ],
        "description": "Field attribute: comodel_name",
        "prefix": "comodel_name"
    },
    "company_dependent": {
        "body": [
            "",
            "company_dependent=${1:True}${0}",
            ""
        ],
        "description": "Field attribute: company_dependent",
        "prefix": "company_dependent"
    },
    "compute": {
        "body": [
            "",
            "    compute='_compute_${1:field}' )",
            "",
            "@api.depends('${2:depends}')",
            "def _compute_${1:field}(self):",
            "    for record in self:",
            "        ${4:record.${1:field} = ${3:something}}",
            "",
            "${0}",
            ""
        ],
        "description": "Field attribute: compute",
        "prefix": "compute"
    },
    "compute_sudo": {
        "body": [
            "",
            "compute_sudo=${1:True}${0}",
            "",
            ""
        ],
        "description": "Field attribute: compute_sudo",
        "prefix": "compute_sudo"
    },
    "constraints": {
        "body": [
            "",
            "_sql_constraints = [",
            "    (",
            "        '${1:name}',",
            "        '${2:constraint}',",
            "        _(u'${3:message}')",
            "    )${4}",
            "]${0}",
            ""
        ],
        "description": "Model SQL contraints",
        "prefix": "constraints"
    },
    "constraints1": {
        "body": [
            "",
            "@api.constrains('${1}')",
            "def _check_${1}(self):",
            "    for record in self:",
            "        ${0}",
            ""
        ],
        "description": "Model Python contraints",
        "prefix": "constraints"
    },
    "context": {
        "body": [
            "",
            "context=\\{${13}\\}${0}",
            ""
        ],
        "description": "Field attribute: context",
        "prefix": "context"
    },
    "controller/controller": {
        "body": [
            "",
            "class ${1:ControllerName}(Controller):",
            "    \"\"\" ${2:The summary line for a class docstring should fit on one line.}",
            "",
            "        Routes:",
            "          /${3:some_url}: ${4:url description}",
            "    \"\"\"",
            "",
            "    @route('/${3}', type='${5:http}', auth='${6:none}')",
            "    def ${3/((^[A-Z])|([^a-zA-Z]))/${2:/capitalize}${3:_}/g}(self${7:, **kw}):",
            "",
            "        pass${0}",
            ""
        ],
        "description": "Odoo web controller class",
        "prefix": "controller/controller"
    },
    "controller/route": {
        "body": [
            "",
            "\"\"\" ",
            "    Routes:",
            "      /${1:some_url}: ${2:url description}",
            "\"\"\"",
            "",
            "@route('/${1}', type='${3:http}', auth='${4:none}')",
            "def ${1/((^[A-Z])|([^a-zA-Z]))/${2:/capitalize}${3:_}/g}(self${5:, **kw}):",
            "",
            "    pass${0}",
            ""
        ],
        "description": "Odoo web controller route",
        "prefix": "controller/route"
    },
    "copy": {
        "body": [
            "",
            "copy=${1:False}${0}",
            ""
        ],
        "description": "Field attribute: copy",
        "prefix": "copy"
    },
    "copyright": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    jeffery CHEN fan<jeffery9@gmail.com>",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2017  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#    ",
            "#    Odoo and OpenERP is trademark of Odoo S.A.",
            "#",
            "###############################################################################",
            "${0}",
            ""
        ],
        "description": "Copyright statement Full",
        "prefix": "copyright"
    },
    "copyright1": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __manifest__.py file at the root folder of this module.                   #",
            "###############################################################################",
            "${0}",
            ""
        ],
        "description": "Copyright statement Simple",
        "prefix": "copyright"
    },
    "copyright2": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    jeffery CHEN fan<jeffery9@gmail.com>",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2017  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#    ",
            "#    Odoo and OpenERP is trademark of Odoo S.A.",
            "#",
            "###############################################################################",
            "${0}",
            ""
        ],
        "description": "Copyright statement Full",
        "prefix": "copyright"
    },
    "def/log": {
        "body": [
            "",
            "def _log(self, level, msg_format, *args, **kwargs):",
            "    \"\"\" Outputs an formated string in log",
            "",
            "        :param level (int): 1=> debug, 2=> info, 3=> warning, 4=> error",
            "        :param message (basestring): name of the message",
            "    \"\"\"",
            "",
            "    methods = ['debug', 'info', 'warning', 'error']",
            "    log = getattr(_logger, methods[level])",
            "",
            "    msg = msg_format.format(*args, **kwargs)",
            "    log(msg)",
            ""
        ],
        "description": "Common logging log method",
        "prefix": "def/log"
    },
    "default": {
        "body": [
            "",
            "default='_default_${1:field}'${0}",
            ""
        ],
        "description": "Field attribute: search, lambda function",
        "prefix": "default"
    },
    "default company": {
        "body": [
            "",
            "default=lambda self: self.env.user.company_id${0}",
            ""
        ],
        "description": "Field attribute: default company",
        "prefix": "default company"
    },
    "default user": {
        "body": [
            "",
            "default=lambda self: self.env.user${0}",
            ""
        ],
        "description": "Field attribute: default user",
        "prefix": "default user"
    },
    "default_model": {
        "body": [
            "",
            "default_model='${1:model.name}'${0}",
            ""
        ],
        "description": "Field attribute: default_model ",
        "prefix": "default_model"
    },
    "digits": {
        "body": [
            "",
            "digits=(${1:16}, ${2:2})",
            ""
        ],
        "description": "Field attribute: digits",
        "prefix": "digits"
    },
    "digits/get_precision": {
        "body": [
            "",
            "digits=dp.get_precision('Product Price')",
            ""
        ],
        "description": "Field attribute: digits",
        "prefix": "digits/get_precision"
    },
    "domain": {
        "body": [
            "",
            "domain=[('${1}','${2}',${3})]${0}",
            ""
        ],
        "description": "Field attribute: domain",
        "prefix": "domain"
    },
    "domain1": {
        "body": [
            "",
            "domain=lambda self: self._get_${1:field}_domain}()",
            ""
        ],
        "description": "Field attribute: domain lambda",
        "prefix": "domain"
    },
    "fail": {
        "body": [
            "",
            "fail(${1:msg=None})",
            ""
        ],
        "description": "fail",
        "prefix": "fail"
    },
    "feature/company_plant": {
        "body": [
            "",
            "factory_id = fields.Many2one(",
            "    string=u'\u5de5\u5382',",
            "    comodel_name='res.company',",
            "    required=True,",
            "    default=lambda self: self.env.user.company_id,",
            "    domain=lambda self: [('is_factory','=',True), ('id','in',self.env.user.company_ids.ids)],",
            ")",
            "",
            "company_id = fields.Many2one(",
            "    string=u'Company',",
            "    comodel_name='res.company',",
            "    ondelete='set null',",
            "    related='factory_id.parent_id',",
            ")",
            "",
            ""
        ],
        "description": "Adds the company/plant support",
        "prefix": "feature/company_plant"
    },
    "feature/mail_thread": {
        "body": [
            "",
            "_inherit = ['mail.thread', 'mail.activity.mixin'${0}]",
            "",
            ""
        ],
        "description": "Adds Mail Thread support",
        "prefix": "feature/mail_thread"
    },
    "feature/multi_company": {
        "body": [
            "",
            "company_ids = fields.Many2many(",
            "    comodel_name='res.company', ",
            "    string=\"Companies\"        ",
            ")",
            "",
            "company_id = fields.Many2one(",
            "    comodel_name='res.company', ",
            "    compute=\"_compute_company_id\", ",
            "    store=True,",
            ")",
            "",
            "@api.multi",
            "@api.depends('company_ids')",
            "def _compute_company_id(self):",
            "    for record in self:",
            "        record.company_id = record.company_ids[:1]",
            "",
            ""
        ],
        "description": "Adds the multi company support",
        "prefix": "feature/multi_company"
    },
    "feature/needaction": {
        "body": [
            "",
            "'ir.needaction_mixin'${0}",
            ""
        ],
        "description": "Adds NeedAction support",
        "prefix": "feature/needaction"
    },
    "feature/parent_child": {
        "body": [
            "",
            "_parent_store = ${1:True}",
            "${0}",
            "",
            "parent_left = fields.Integer('Left Parent', index=1)",
            "parent_right = fields.Integer('Right Parent', index=1)",
            "",
            ""
        ],
        "description": "Adds the _parent_store attribute and parent_left and parent_right",
        "prefix": "feature/parent_child"
    },
    "feature/state": {
        "body": [
            "",
            "state = fields.Selection(",
            "    string=u'State',",
            "    selection=[('draft', 'Draft'), ('confirmed', 'Confirmed'),  ('close', 'Close'),  ('cancel', 'Cancel')],",
            "    default='draft',",
            "    readonly=True,",
            ")",
            "",
            "@api.multi",
            "def action_confirm(self):",
            "    self.write({'state': 'confirmed'})",
            "",
            "@api.multi",
            "def action_draft(self):",
            "    self.write({'state': 'draft'})",
            "",
            "@api.multi",
            "def action_cancel(self):",
            "    self.write({'state': 'cancel'})",
            "",
            "@api.multi",
            "def action_close(self):",
            "    self.write({'state': 'close'})",
            "",
            "${0}",
            ""
        ],
        "description": "Adds state support",
        "prefix": "feature/state"
    },
    "feature/utm": {
        "body": [
            "",
            "'utm.mixin'${0}",
            ""
        ],
        "description": "Adds utm support",
        "prefix": "feature/utm"
    },
    "field.company_id": {
        "body": [
            "",
            "company_id = fields.Many2one(",
            "    string=u'Company', ",
            "    comodel_name='res.company', ",
            "    required=True, ",
            "    default=lambda self: self.env.user.company_id",
            ")",
            ""
        ],
        "description": "",
        "prefix": "field.company_id"
    },
    "fields.Attachment": {
        "body": [
            "",
            "${1:attachment} = fields.Binary(string=u'${3:${1/([a-z]+)([_])/${1:/capitalize} /g}}', attachment=True)",
            ""
        ],
        "description": "",
        "prefix": "fields.Attachment"
    },
    "fields.Binary": {
        "body": [
            "",
            "${1:field_name} = fields.Binary(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Binary"
    },
    "fields.Boolean": {
        "body": [
            "",
            "${1:field_name} = fields.Boolean(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Boolean"
    },
    "fields.Char": {
        "body": [
            "",
            "${1:field_name} = fields.Char(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Char"
    },
    "fields.Date": {
        "body": [
            "",
            "${1:field_name} = fields.Date(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    default=${6:fields.Date.context_today},",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Date"
    },
    "fields.Datetime": {
        "body": [
            "",
            "${1:field_name} = fields.Datetime(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    default=${6:fields.Datetime.now},",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Datetime"
    },
    "fields.Float": {
        "body": [
            "",
            "${1:field_name} = fields.Float(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Float"
    },
    "fields.Html": {
        "body": [
            "",
            "${1:field_name} = fields.Html(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Html"
    },
    "fields.Integer": {
        "body": [
            "",
            "${1:field_name} = fields.Integer(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Integer"
    },
    "fields.Many2many": {
        "body": [
            "",
            "${1:field_name}_ids = fields.Many2many(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    comodel_name='${8:model.name}',",
            "    relation='${10:${8/\\./_/g}_${9:this_model}_rel}',",
            "    column1='${11:${8/\\./_/g}_id}',",
            "    column2='${12:${9}_id}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Many2many"
    },
    "fields.Many2one": {
        "body": [
            "",
            "${1:field_name}_id = fields.Many2one(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    comodel_name='${8:model.name}',",
            "    ondelete='${11:set null}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Many2one"
    },
    "fields.One2many": {
        "body": [
            "",
            "${1:field_name}_ids = fields.One2many(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    comodel_name='${8:model.name}',",
            "    inverse_name='${9:inverse_field}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.One2many"
    },
    "fields.Reference": {
        "body": [
            "",
            "${1:field_name}_ref = fields.Reference(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    selection=[('${8:model.name}', '${9:String}'),('${10:model.name}', '${11:String}')]",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Reference"
    },
    "fields.Selection": {
        "body": [
            "",
            "${1:field_name} = fields.Selection(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            "    selection=[('${8:valor1}', '${9:${8/(.)(.+)/${1:/capitalize}${2:/capitalize}/g}}'), ('${10:valor2}', '${11:${10/(.)(.+)/${1:/capitalize}${2:/capitalize}/g}}')]",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Selection"
    },
    "fields.Text": {
        "body": [
            "",
            "${1:field_name} = fields.Text(",
            "    string=u'${2:${1/([a-z]+)([_])/${1:/capitalize} /g}}',",
            ")${0}",
            ""
        ],
        "description": "",
        "prefix": "fields.Text"
    },
    "file/__init__": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __manifest__.py file at the root folder of this module.                   #",
            "###############################################################################",
            "",
            "from . import ${1:models}${0}",
            ""
        ],
        "description": "__init__ file",
        "prefix": "file/__init__"
    },
    "file/__manifest__": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    jeffery CHEN fan<jeffery9@gmail.com>",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2017  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#    ",
            "#    Odoo and OpenERP is trademark of Odoo S.A.",
            "#",
            "###############################################################################",
            "{",
            "    'name': '${1:Human readable name}',",
            "    'summary': '${2:${1}} Module Project',",
            "    'version': '1.0',",
            "",
            "    'description': \"\"\"",
            "${3:${1}} Module Project.",
            "==============================================",
            "",
            "${4}",
            "    \"\"\",",
            "",
            "    'author': '${5:$TM_FULLNAME}',",
            "    'maintainer': '${5}',",
            "    'contributors': ['${6:${5} <${5}@gmail.com>}'],",
            "",
            "    'website': 'http://www.gitlab.com/${7:${5}}',",
            "",
            "    'license': 'AGPL-3',",
            "    'category': 'Uncategorized',",
            "",
            "    'depends': [",
            "        'base'",
            "    ],",
            "    'external_dependencies': {",
            "        'python': [",
            "        ],",
            "    },",
            "    'data': [",
            "    ],",
            "    'demo': [",
            "    ],",
            "    'js': [",
            "    ],",
            "    'css': [",
            "    ],",
            "    'qweb': [",
            "    ],",
            "    'images': [",
            "    ],",
            "    'test': [",
            "    ],",
            "",
            "    'installable': True",
            "}${0}",
            ""
        ],
        "description": "Odoo manifest file common structure",
        "prefix": "file/__manifest__"
    },
    "file/__manifest__1": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    jeffery CHEN fan<jeffery9@gmail.com>",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2017  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#    ",
            "#    Odoo and OpenERP is trademark of Odoo S.A.",
            "#",
            "###############################################################################",
            "{",
            "    'name': '${1:Human readable name}',",
            "    'summary': '${2:${1}} Module Project',",
            "    'version': '1.0',",
            "",
            "    'description': \"\"\"",
            "${3:${1}} Module Project.",
            "==============================================",
            "",
            "${4}",
            "    \"\"\",",
            "",
            "    'author': '${5:$TM_FULLNAME}',",
            "    'maintainer': '${5}',",
            "    'contributors': ['${6:${5} <${5}@gmail.com>}'],",
            "",
            "    'website': 'http://www.gitlab.com/${7:${5}}',",
            "",
            "    'license': 'AGPL-3',",
            "    'category': 'Uncategorized',",
            "",
            "    'depends': [",
            "        'base'",
            "    ],",
            "    'external_dependencies': {",
            "        'python': [",
            "        ],",
            "    },",
            "    'data': [",
            "    ],",
            "    'demo': [",
            "    ],",
            "    'js': [",
            "    ],",
            "    'css': [",
            "    ],",
            "    'qweb': [",
            "    ],",
            "    'images': [",
            "    ],",
            "    'test': [",
            "    ],",
            "",
            "    'installable': True",
            "}${0}",
            ""
        ],
        "description": "Odoo manifest file common structure",
        "prefix": "file/__manifest__"
    },
    "file/__openerp__": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#",
            "#    Odoo, Open Source Management Solution",
            "#",
            "#    Copyright (c) All rights reserved:",
            "#        (c) 2017  $TM_FULLNAME",
            "#",
            "#    This program is free software: you can redistribute it and/or modify",
            "#    it under the terms of the GNU Affero General Public License as",
            "#    published by the Free Software Foundation, either version 3 of the",
            "#    License, or (at your option) any later version.",
            "#",
            "#    This program is distributed in the hope that it will be useful,",
            "#    but WITHOUT ANY WARRANTY; without even the implied warranty of",
            "#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
            "#    GNU Affero General Public License for more details.",
            "#",
            "#    You should have received a copy of the GNU Affero General Public License",
            "#    along with this program.  If not, see http://www.gnu.org/licenses",
            "#    ",
            "#    Odoo and OpenERP is trademark of Odoo S.A.",
            "#",
            "###############################################################################",
            "{",
            "    'name': '${1:Human readable name}',",
            "    'summary': '${2:${1}} Module Project',",
            "    'version': '1.0',",
            "",
            "    'description': \"\"\"",
            "${3:${1}} Module Project.",
            "==============================================",
            "",
            "${4}",
            "    \"\"\",",
            "",
            "    'author': '${5:$TM_FULLNAME}',",
            "    'maintainer': '${5}',",
            "    'contributors': ['${6:${5} <${5}@gmail.com>}'],",
            "",
            "    'website': 'http://www.gitlab.com/${7:${5}}',",
            "",
            "    'license': 'AGPL-3',",
            "    'category': 'Uncategorized',",
            "",
            "    'depends': [",
            "        'base'",
            "    ],",
            "    'external_dependencies': {",
            "        'python': [",
            "        ],",
            "    },",
            "    'data': [",
            "    ],",
            "    'demo': [",
            "    ],",
            "    'js': [",
            "    ],",
            "    'css': [",
            "    ],",
            "    'qweb': [",
            "    ],",
            "    'images': [",
            "    ],",
            "    'test': [",
            "    ],",
            "",
            "    'installable': True",
            "}${0}",
            ""
        ],
        "description": "Odoo manifest file common structure",
        "prefix": "file/__openerp__"
    },
    "file/coding": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "${0}",
            ""
        ],
        "description": "utf-8 coding",
        "prefix": "file/coding"
    },
    "file/controller": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __manifest__.py file at the root folder of this module.                  #",
            "###############################################################################",
            "",
            "from odoo.http import route, request, Controller, _",
            "from odoo.exceptions import UserError, ValidationError",
            "${0}",
            ""
        ],
        "description": "Odoo web controller file",
        "prefix": "file/controller"
    },
    "file/model": {
        "body": [
            "",
            "# -*- coding: utf-8 -*-",
            "###############################################################################",
            "#    License, author and contributors information in:                         #",
            "#    __manifest__.py file at the root folder of this module.                  #",
            "###############################################################################",
            "",
            "from odoo import models, fields, api, _",
            "from odoo.exceptions import UserError, ValidationError",
            "${0}",
            ""
        ],
        "description": "Odoo model file",
        "prefix": "file/model"
    },
    "help": {
        "body": [
            "",
            "help='${1:Technical Field }'${0}",
            ""
        ],
        "description": "Field attribute: help",
        "prefix": "help"
    },
    "import/datetime": {
        "body": [
            "",
            "from datetime import date, datetime",
            "from dateutil.relativedelta import relativedelta",
            "from odoo.tools import DEFAULT_SERVER_DATE_FORMAT as DATE_FORMAT",
            "from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT as DATETIME_FORMAT",
            "${0}",
            ""
        ],
        "description": "import date and time tools",
        "prefix": "import/datetime"
    },
    "import/dp": {
        "body": [
            "",
            "import odoo.addons.decimal_precision as dp",
            "${0}",
            ""
        ],
        "description": "",
        "prefix": "import/dp"
    },
    "import/exceptions": {
        "body": [
            "",
            "from odoo.exceptions import UserError, ValidationError",
            "${0}",
            ""
        ],
        "description": "",
        "prefix": "import/exceptions"
    },
    "import/logging": {
        "body": [
            "",
            "import logging",
            "_logger = logging.getLogger(__name__)",
            "${0}",
            ""
        ],
        "description": "logging instance",
        "prefix": "import/logging"
    },
    "import/translate": {
        "body": [
            "",
            "from odoo.tools.translate import _${0}",
            ""
        ],
        "description": "import odoo translate",
        "prefix": "import/translate"
    },
    "index": {
        "body": [
            "",
            "index=${1:True}${0}",
            ""
        ],
        "description": "Field attribute: index",
        "prefix": "index"
    },
    "inverse": {
        "body": [
            "",
            "inverse='_inverse_${1:field}'${0}",
            ""
        ],
        "description": "Field attribute: inverse, lambda function",
        "prefix": "inverse"
    },
    "limit": {
        "body": [
            "",
            "limit=${1:80}${0}",
            ""
        ],
        "description": "Field attribute: limit",
        "prefix": "limit"
    },
    "method/_browse": {
        "body": [
            "",
            "@classmethod",
            "def _browse(cls, env, ids):",
            "    \"\"\" Returns a recordset for the ids provided as parameter in the current",
            "        environment.",
            "",
            "        Can take no ids, a single id or a sequence of ids.",
            "",
            "        :param cls: model class",
            "        :param env: environment",
            "        :param ids: none, a single id or a sequence of ids",
            "",
            "        :return: a recordset",
            "    \"\"\"",
            "",
            "    result = ${1:class_name}._browse(env, ids)",
            "    ${0}",
            "    return result",
            ""
        ],
        "description": "_browse method signature",
        "prefix": "method/_browse"
    },
    "method/_onchange": {
        "body": [
            "",
            "@api.onchange('${1:field}')",
            "def _onchange_${1}(self):",
            "    ${3:self.${2:field} = self.${1}}",
            "${0}",
            ""
        ],
        "description": "_onchange method signature, code",
        "prefix": "method/_onchange"
    },
    "method/_onchange1": {
        "body": [
            "",
            "@api.onchange('${1:field_name}')",
            "def _onchange_${1}(self):",
            "    return {",
            "        'domain': {",
            "            '${2:field_name}': ${6:[('${3:field_name}', '${4:=}', ${5:self.${1}})]}",
            "        }",
            "    }${0}",
            ""
        ],
        "description": "_onchange method signature, domain",
        "prefix": "method/_onchange"
    },
    "method/_onchange2": {
        "body": [
            "",
            "@api.onchange('${1:field}')",
            "def _onchange_${1}(self):",
            "    return {",
            "        'warning': {",
            "            'title': '${2:Text of the title}',",
            "            'message': '${3:Text of the message}'",
            "        }",
            "    }${0}",
            ""
        ],
        "description": "_onchange method signature, warning",
        "prefix": "method/_onchange"
    },
    "method/_search": {
        "body": [
            "",
            "def _search_${1: field}(self, operator, value):",
            "    return [('${2:related}', operator, value)]${0}",
            ""
        ],
        "description": "_search method signature",
        "prefix": "method/_search"
    },
    "method/action_confirm": {
        "body": [
            "",
            "@api.multi",
            "def action_confirm(self):",
            "    for record in self:",
            "        record.write( { '${1:field}': '${2:value}'})",
            "    return True",
            "${0}",
            ""
        ],
        "description": "action_confirm method signature",
        "prefix": "method/action_confirm"
    },
    "method/compute": {
        "body": [
            "",
            "@api.depends('${2:depends}')",
            "def _compute_${1:field}(self):",
            "    for record in self:",
            "        ${4:record.${1:field} = ${3:something}}",
            "${0}",
            ""
        ],
        "description": "_compute method signature",
        "prefix": "method/compute"
    },
    "method/copy": {
        "body": [
            "",
            "@api.multi",
            "def copy(self, default=None):",
            "    \"\"\"",
            "        Create a new record in ${1:ModelName} model from existing one",
            "        @param default: dict which contains the values to be override during",
            "        copy of object",
            "",
            "        @return: returns a id of newly created record",
            "    \"\"\"",
            "",
            "    result = super(${1:ModelName}, self).copy(default)",
            "    ${0}",
            "",
            "    return result",
            ""
        ],
        "description": "copy method signature",
        "prefix": "method/copy"
    },
    "method/create": {
        "body": [
            "",
            "@api.model",
            "def create(self, values):",
            "    \"\"\"",
            "        Create a new record for a model ${1:ModelName}",
            "        @param values: provides a data for new record",
            "",
            "        @return: returns a id of new record",
            "    \"\"\"",
            "",
            "    result = super(${1:Model_Name}, self).create(values)${0}",
            "",
            "    return result",
            ""
        ],
        "description": "create method signature",
        "prefix": "method/create"
    },
    "method/default_get": {
        "body": [
            "",
            "@api.model",
            "def default_get(self, fields):",
            "    res = super(${1:ModelClass}, self).default_get(fields)",
            "    ${0}",
            "",
            "    return res",
            "    ",
            ""
        ],
        "description": "default_get method signature",
        "prefix": "method/default_get"
    },
    "method/fields_get": {
        "body": [
            "",
            "@api.model",
            "def fields_get(self, allfields=None, attributes=None):",
            "    fields_to_hide = []",
            "    for fname, field in self._fields.items():",
            "        if fname.startswith('${2:prefix}'):",
            "            fields_to_hide.append(fname)",
            "",
            "    res = super(${1:Model}, self).fields_get(allfields, attributes)",
            "",
            "    for field in fields_to_hide:",
            "",
            "        res[field]['searchable'] = False",
            "        res[field]['sortable'] = False",
            "",
            "    return res",
            "${0}",
            ""
        ],
        "description": "fields_get remove fields from search and groubby",
        "prefix": "method/fields_get"
    },
    "method/get_empty_list_help": {
        "body": [
            "",
            "@api.model",
            "def get_empty_list_help(self, help):",
            "    \"\"\" Generic method giving the help message displayed when having",
            "        no result to display in a list or kanban view.",
            "    \"\"\"",
            "",
            "    ${0:return help}",
            ""
        ],
        "description": "get_empty_list_help method signature",
        "prefix": "method/get_empty_list_help"
    },
    "method/get_formview_id": {
        "body": [
            "",
            "@api.one",
            "@api.returns('ir.ui.view')",
            "def get_formview_id(self):",
            "    \"\"\" Return an view id to open the document with.",
            "",
            "        :param int id: id of the document to open",
            "    \"\"\"",
            "",
            "    ${0:return False}",
            ""
        ],
        "description": "get_formview_id method signature",
        "prefix": "method/get_formview_id"
    },
    "method/init": {
        "body": [
            "",
            "def init(self):",
            "    \"\"\" Build database view which will be used as module origin",
            "",
            "    \"\"\"",
            "    self._sql_query = \"\"\"",
            "        SELECT",
            "            ROW_NUMBER() OVER() AS \"id\"",
            "    \"\"\"",
            "",
            "    tools.drop_view_if_exists(self._cr, ${1:self._table})",
            "    self._cr.execute(",
            "        'create or replace view {} as ({})'.format(",
            "            ${1},",
            "            self._sql_query",
            "        )",
            "    )${0}",
            ""
        ],
        "description": "init method signature",
        "prefix": "method/init"
    },
    "method/name_get": {
        "body": [
            "",
            "@api.multi",
            "@api.depends('name', '${1:ref}')",
            "def name_get(self):",
            "    result = []",
            "    for record in self:",
            "        if record.${1:ref}:",
            "            name = '[' + record.${1:ref} + '] ' + record.name",
            "        else:",
            "            name = record.name",
            "        result.append((record.id, name))",
            "    return result",
            "${0}",
            ""
        ],
        "description": "name_get method signature",
        "prefix": "method/name_get"
    },
    "method/name_search": {
        "body": [
            "",
            "@api.model",
            "def name_search(self, name, args=None, operator='ilike', limit=100):",
            "    args = args or []",
            "    domain = []",
            "    if name:",
            "        domain = [",
            "            '|', ('${1:field_name}', '=ilike', name), ('${2:field_name}', operator, name)",
            "        ]",
            "        if operator in expression.NEGATIVE_TERM_OPERATORS:",
            "            domain = ['&', '!'] + domain[1:]",
            "    records = self.search(domain + args, limit=limit)",
            "    return records.name_get()",
            "",
            "${0}",
            ""
        ],
        "description": "name_search method signature",
        "prefix": "method/name_search"
    },
    "method/toggle_active": {
        "body": [
            "",
            "@api.multi",
            "def toggle_active(self):",
            "    return {'warning': {",
            "                    'title': _(\"Warning\"),",
            "                    'message': _(u\"\u4e0d\u5141\u8bb8\u5bf9\u6b64\u6a21\u578b\u7684\u8bb0\u5f55\u8fdb\u884c\u201c\u5f52\u6863\u201d\u64cd\u4f5c\uff01\") ,",
            "    }}",
            "${0}",
            ""
        ],
        "description": "toggle_active method signature",
        "prefix": "method/toggle_active"
    },
    "method/unlink": {
        "body": [
            "",
            "@api.multi",
            "def unlink(self):",
            "    \"\"\"",
            "        Delete all record(s) from recordset",
            "        return True on success, False otherwise",
            "",
            "        @return: True on success, False otherwise",
            "",
            "        #TODO: process before delete resource",
            "    \"\"\"",
            "",
            "    result = super(${1:ModelName}, self).unlink()${0}",
            "",
            "    return result",
            ""
        ],
        "description": "unlink method signature",
        "prefix": "method/unlink"
    },
    "method/unlink_restrict": {
        "body": [
            "",
            "@api.multi",
            "def unlink(self):",
            "    for record in self:",
            "        if record.state not in ('draft'):",
            "            raise UserError(",
            "                u'\u4e0d\u53ef\u4ee5\u5220\u9664\u975e\u8349\u7a3f\u72b6\u6001\u7684\u5355\u636e!'",
            "            )",
            "    return super(ModelClass, self).unlink()",
            ""
        ],
        "description": "restrict unlink",
        "prefix": "method/unlink_restrict"
    },
    "method/view_header_get": {
        "body": [
            "",
            "@api.model",
            "def view_header_get(self, view_id=None, view_type='form'):",
            "    \"\"\" Returns the window title which depends on the context \"\"\"",
            "",
            "    ${0:return False}",
            ""
        ],
        "description": "view_header_get method signature",
        "prefix": "method/view_header_get"
    },
    "method/view_init": {
        "body": [
            "",
            "@api.model",
            "def view_init(self, fields_list):",
            "    \"\"\" Does specific things when a view on the object is opened \"\"\"",
            "",
            "    ${0:pass}",
            ""
        ],
        "description": "view_init method signature",
        "prefix": "method/view_init"
    },
    "method/write": {
        "body": [
            "",
            "@api.multi",
            "def write(self, values):",
            "    \"\"\"",
            "        Update all record(s) in recordset, with new value comes as {values}",
            "        return True on success, False otherwise",
            "",
            "        @param values: dict of new values to be set",
            "",
            "        @return: True on success, False otherwise",
            "    \"\"\"",
            "",
            "    result = super(${1:Model_Name}, self).write(values)${0}",
            "",
            "    return result",
            ""
        ],
        "description": "write method signature",
        "prefix": "method/write"
    },
    "model/abstract": {
        "body": [
            "",
            "class ${1:ModelName}(models.AbstractModel):",
            "    _name = '${3:${1/(.+?)([A-Z])/${1:/downcase}.${2:/downcase}/g}}'",
            "",
            "    ${0}",
            ""
        ],
        "description": "Odoo abstract model class",
        "prefix": "model/abstract"
    },
    "model/inherit": {
        "body": [
            "",
            "class ${1:ModelName}(models.Model):",
            "    _inherit = '${3:${1/(.+?)([A-Z])/${1:/downcase}.${2:/downcase}/g}}'",
            "",
            "    ${0}",
            ""
        ],
        "description": "Odoo inherit model class",
        "prefix": "model/inherit"
    },
    "model/model": {
        "body": [
            "",
            "class ${1:ModelName}(models.Model):",
            "    _name = '${3:${1/(.+?)([A-Z])/${1:/downcase}.${2:/downcase}/g}}'",
            "    _description = u'${4:${1/(.+?)([A-Z])/${1:/downcase} ${2:/downcase}/g}}'",
            "",
            "    _rec_name = 'name'",
            "    _order = 'name ASC'",
            "",
            "    name = fields.Char(",
            "        string=u'Name',",
            "        required=True,",
            "        default=lambda self: _('New'),",
            "        copy=False",
            "    )",
            "",
            "    ${0}",
            ""
        ],
        "description": "Odoo generic model class",
        "prefix": "model/model"
    },
    "model/transient": {
        "body": [
            "",
            "class ${1:ModelName}(models.TransientModel):",
            "    _name = '${3:${1/(.+?)([A-Z])/${1:/downcase}.${2:/downcase}/g}}'",
            "    _description = u'${4:${1/(.+?)([A-Z])/${1:/downcase} ${2:/downcase}/g}}'",
            "",
            "    ${0}",
            ""
        ],
        "description": "Odoo transient model class",
        "prefix": "model/transient"
    },
    "ondelete": {
        "body": [
            "",
            "ondelete='${1:set null}'${0}",
            ""
        ],
        "description": "Field attribute: ondelete",
        "prefix": "ondelete"
    },
    "readonly": {
        "body": [
            "",
            "readonly=True${0} ",
            ""
        ],
        "description": "Field attribute: readonly",
        "prefix": "readonly"
    },
    "readonly/states": {
        "body": [
            "",
            "readonly=True, states={'draft': [('readonly', False)]}${0} ",
            ""
        ],
        "description": "Field attribute: readonly states",
        "prefix": "readonly/states"
    },
    "related": {
        "body": [
            "",
            "related='${1:field_name}',",
            "readonly=True,",
            "store=True${0}",
            ""
        ],
        "description": "Field attribute: related",
        "prefix": "related"
    },
    "related_sudo": {
        "body": [
            "",
            "related_sudo=${1:False}${0}",
            ""
        ],
        "description": "Field attribute: related_sudo",
        "prefix": "related_sudo"
    },
    "required": {
        "body": [
            "",
            "required=${1:True}${0}",
            ""
        ],
        "description": "Field attribute: required",
        "prefix": "required"
    },
    "return/act_window": {
        "body": [
            "",
            "return {",
            "    'name': _('${1: Human Readable String}'),",
            "    'type': 'ir.actions.act_window',",
            "    'view_type': 'form',",
            "    'view_mode': 'tree,form',",
            "    'res_model': '${2:model}',",
            "    'domain': [('id', 'in', ${3:ids})],",
            "}${0}",
            ""
        ],
        "description": "pop window",
        "prefix": "return/act_window"
    },
    "return/act_window_close": {
        "body": [
            "",
            "return {'type': 'ir.actions.act_window_close'${0}",
            ""
        ],
        "description": "close window",
        "prefix": "return/act_window_close"
    },
    "selection_add": {
        "body": [
            "",
            "selection_add=[('${1:draft}', ${1/([a-z]+)([_])/${1:/capitalize} /g})${0}]",
            ""
        ],
        "description": "Field attribute: selection_add ",
        "prefix": "selection_add"
    },
    "selection_element": {
        "body": [
            "",
            "('${1:draft}', ${1/([a-z]+)([_])/${1:/capitalize} /g})${0}",
            ""
        ],
        "description": "Field attribute: selection add new element ",
        "prefix": "selection_element"
    },
    "sequence/line_number": {
        "body": [
            "",
            "line_number = fields.Integer(string=u'\u884c\u53f7', default=10)",
            "",
            "@api.model",
            "def default_get(self, fields):",
            "    default_values = super(${1:ModelClass}, self).default_get(fields)",
            "",
            "    line_ids = self.env.context.get('${2:line_ids}', False)",
            "    if line_ids:",
            "        lines = self.env['${3:model}'].resolve_2many_commands(",
            "            '${2:line_ids}', line_ids",
            "        )",
            "        lines.sort(key=lambda x:x.get('line_number'))",
            "",
            "        if lines:",
            "            sequence = lines[-1]['line_number'] + 10",
            "        else:",
            "            sequence = 10",
            "",
            "        default_values.update({'line_number': sequence})",
            "",
            "    return default_values",
            "",
            ""
        ],
        "description": "Line Number Add 10 automaticlly",
        "prefix": "sequence/line_number"
    },
    "sequence/next_by_code": {
        "body": [
            "",
            "if values.get('name', _('New')) == _('New'):",
            "    if 'company_id' in values:",
            "        values['name'] = self.env['ir.sequence'].with_context(",
            "            force_company=values['company_id']",
            "        ).next_by_code('${1:model}') or _('New')",
            "    else:",
            "        values['name'] = self.env['ir.sequence'].next_by_code(",
            "            '${1:model}'",
            "        ) or _('New')",
            "",
            ""
        ],
        "description": "next_by_code, used in create()",
        "prefix": "sequence/next_by_code"
    },
    "size": {
        "body": [
            "",
            "size=${1:32}${0}",
            ""
        ],
        "description": "Field attribute: size",
        "prefix": "size"
    },
    "states": {
        "body": [
            "",
            "states={'${1:state}': [${0}]}",
            ""
        ],
        "description": "Field attribute: states",
        "prefix": "states"
    },
    "states/invisible": {
        "body": [
            "",
            "(invisible, True)${0}",
            ""
        ],
        "description": "Field attribute: states state invisible",
        "prefix": "states/invisible"
    },
    "states/readonly": {
        "body": [
            "",
            "(readonly, True)${0}",
            ""
        ],
        "description": "Field attribute: states state readonly",
        "prefix": "states/readonly"
    },
    "states/required": {
        "body": [
            "",
            "(required, True)${0}",
            ""
        ],
        "description": "Field attribute: states state required",
        "prefix": "states/required"
    },
    "states/state": {
        "body": [
            "",
            "${1:state}': [${0}]",
            ""
        ],
        "description": "Field attribute: states state",
        "prefix": "states/state"
    },
    "store": {
        "body": [
            "",
            "store=${1:True}${0}",
            ""
        ],
        "description": "Field attribute: store",
        "prefix": "store"
    },
    "string": {
        "body": [
            "",
            "string='${1}'${0}",
            ""
        ],
        "description": "Field attribute: string",
        "prefix": "string"
    },
    "super": {
        "body": [
            "",
            "super(${1:Extension}, self).${2:handler}(${3})",
            ""
        ],
        "description": "Call Python parent class",
        "prefix": "super"
    },
    "test": {
        "body": [
            "",
            "def test_${1:item_name}(self):",
            "    \"\"\" Checks if the ${1} works properly",
            "    \"\"\"",
            "",
            "    ${0:pass}",
            ""
        ],
        "description": "Test case method",
        "prefix": "test"
    },
    "track_visibility": {
        "body": [
            "",
            "track_visibility='${1:onchange}'${0}",
            ""
        ],
        "description": "Field attribute: track_visibility",
        "prefix": "track_visibility"
    },
    "translate": {
        "body": [
            "",
            "translate=${1:False}${0}",
            ""
        ],
        "description": "Field attribute: translate",
        "prefix": "translate"
    },
    "x2m/create": {
        "body": [
            "",
            "(0, False, ${1:{values}})",
            ""
        ],
        "description": "x2m create",
        "prefix": "x2m/create"
    },
    "x2m/delete": {
        "body": [
            "",
            "(2, ${1:id}, False)",
            ""
        ],
        "description": "x2m delete, don't use in create()",
        "prefix": "x2m/delete"
    },
    "x2m/link": {
        "body": [
            "",
            "(4, ${1:id}, False)",
            ""
        ],
        "description": "x2m link, don't use in One2many",
        "prefix": "x2m/link"
    },
    "x2m/replace": {
        "body": [
            "",
            "(6, False, ${1:ids)",
            ""
        ],
        "description": "x2m replace, don't use in create() and One2many",
        "prefix": "x2m/replace"
    },
    "x2m/unlink": {
        "body": [
            "",
            "(3, ${1:id}, False)",
            ""
        ],
        "description": "x2m unlink, don't use in create()",
        "prefix": "x2m/unlink"
    },
    "x2m/unlink_all": {
        "body": [
            "",
            "(5, False, False)",
            ""
        ],
        "description": "x2m unlink all, don't use in create()",
        "prefix": "x2m/unlink_all"
    },
    "x2m/update": {
        "body": [
            "",
            "(1, ${1:id}, ${2:{values}})",
            ""
        ],
        "description": "x2m update, don't use in create()",
        "prefix": "x2m/update"
    }
}