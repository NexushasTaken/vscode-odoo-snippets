{
  "TransactionCase": {
    "body": [
      "from openerp.tests.common import TransactionCase",
      "class ${1:ModelName}(TransactionCase):",
      "\t\"\"\" ${2:This class contains the unit tests for '${1/(.+?)([A-Z])/${1:/downcase}.${2:/downcase}/g}'.}",
      "\t\tTests:",
      "\t\t  - ${3}: Checks if the ${3} works properly",
      "\t\"\"\"",
      "\tdef setUp(self):",
      "\t\tsuper(${1}, self).setUp()",
      "\tdef test_${3:item_name}(self):",
      "\t\t\"\"\" Checks if the ${3} works properly \"\"\"",
      "\t\t${0:pass}"
    ],
    "description": "",
    "prefix": "oo_TransactionCase"
  },
  "addTypeEqualityFunc": {
    "body": [
      "addTypeEqualityFunc(${1:typeobj}, ${2:function})"
    ],
    "description": "addTypeEqualityFunc",
    "prefix": "oo_addTypeEqualityFunc"
  },
  "api/depends": {
    "body": [
      "@api.depends('${1:field}')"
    ],
    "description": "decorator depends",
    "prefix": "oo_api/depends"
  },
  "assertAlmostEqual": {
    "body": [
      "assertAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${8:, ${7:delta=None}})"
    ],
    "description": "assertAlmostEqual",
    "prefix": "oo_assertAlmostEqual"
  },
  "assertDictContainsSubset": {
    "body": [
      "assertDictContainsSubset(${1:expected}, ${2:actual}${4:, ${3:msg=None}})"
    ],
    "description": "assertDictContainsSubset",
    "prefix": "oo_assertDictContainsSubset"
  },
  "assertDictEqual": {
    "body": [
      "assertDictEqual(${1:expected}, ${2:actual}${4:, ${3:msg=None}})"
    ],
    "description": "assertDictEqual",
    "prefix": "oo_assertDictEqual"
  },
  "assertEqual": {
    "body": [
      "assertEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertEqual",
    "prefix": "oo_assertEqual"
  },
  "assertFalse": {
    "body": [
      "assertFalse(${1:expr}${3:, ${2:msg=None}})"
    ],
    "description": "assertFalse",
    "prefix": "oo_assertFalse"
  },
  "assertGreater": {
    "body": [
      "assertGreater(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertGreater",
    "prefix": "oo_assertGreater"
  },
  "assertGreaterEqual": {
    "body": [
      "assertGreaterEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertGreaterEqual",
    "prefix": "oo_assertGreaterEqual"
  },
  "assertIn": {
    "body": [
      "assertIn(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertIn",
    "prefix": "oo_assertIn"
  },
  "assertIs": {
    "body": [
      "assertIs(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertIs",
    "prefix": "oo_assertIs"
  },
  "assertIsInstance": {
    "body": [
      "assertIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})"
    ],
    "description": "assertIsInstance",
    "prefix": "oo_assertIsInstance"
  },
  "assertIsNone": {
    "body": [
      "assertIsNone(${1:expr}${3:, ${2:msg=None}})"
    ],
    "description": "assertIsNone",
    "prefix": "oo_assertIsNone"
  },
  "assertIsNot": {
    "body": [
      "assertIsNot(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertIsNot",
    "prefix": "oo_assertIsNot"
  },
  "assertIsNotNone": {
    "body": [
      "assertIsNotNone(${1:expr}${3:, ${2:msg=None}})"
    ],
    "description": "assertIsNotNone",
    "prefix": "oo_assertIsNotNone"
  },
  "assertItemsEqual": {
    "body": [
      "assertItemsEqual(${1:actual}, ${2:expected}${4:, ${3:msg=None}})"
    ],
    "description": "assertItemsEqual",
    "prefix": "oo_assertItemsEqual"
  },
  "assertLess": {
    "body": [
      "assertLess(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertLess",
    "prefix": "oo_assertLess"
  },
  "assertLessEqual": {
    "body": [
      "assertLessEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertLessEqual",
    "prefix": "oo_assertLessEqual"
  },
  "assertListEqual": {
    "body": [
      "assertListEqual(${1:list1}, ${2:list2}${4:, ${3:msg=None}})"
    ],
    "description": "assertListEqual",
    "prefix": "oo_assertListEqual"
  },
  "assertMultiLineEqual": {
    "body": [
      "assertMultiLineEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertMultiLineEqual",
    "prefix": "oo_assertMultiLineEqual"
  },
  "assertNotAlmostEqual": {
    "body": [
      "assertNotAlmostEqual(${1:first}, ${2:second}${4:, ${3:places=7}}${6:, ${5:msg=None}}${9:, ${8:delta=None}})"
    ],
    "description": "assertNotAlmostEqual",
    "prefix": "oo_assertNotAlmostEqual"
  },
  "assertNotEqual": {
    "body": [
      "assertNotEqual(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertNotEqual",
    "prefix": "oo_assertNotEqual"
  },
  "assertNotIn": {
    "body": [
      "assertNotIn(${1:first}, ${2:second}${4:, ${3:msg=None}})"
    ],
    "description": "assertNotIn",
    "prefix": "oo_assertNotIn"
  },
  "assertNotIsInstance": {
    "body": [
      "assertNotIsInstance(${1:obj}, ${2:cls}${4:, ${3:msg=None}})"
    ],
    "description": "assertNotIsInstance",
    "prefix": "oo_assertNotIsInstance"
  },
  "assertNotRegexpMatches": {
    "body": [
      "assertNotRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})"
    ],
    "description": "assertNotRegexpMatches",
    "prefix": "oo_assertNotRegexpMatches"
  },
  "assertRaises": {
    "body": [
      "assertRaises(${1:exception}, ${2:callable}, ${3:*args}, ${4:**kwds})"
    ],
    "description": "assertRaises (extended)",
    "prefix": "oo_assertRaises"
  },
  "assertRaises1": {
    "body": [
      "assertRaises(${1:exception})"
    ],
    "description": "assertRaises",
    "prefix": "oo_assertRaises"
  },
  "assertRaisesRegexp": {
    "body": [
      "assertRaisesRegexp(${1:exception}, ${2:regexp}, ${3:callable}, ${4:*args}, ${5:**kwds})"
    ],
    "description": "assertRaisesRegexp (extended)",
    "prefix": "oo_assertRaisesRegexp"
  },
  "assertRaisesRegexp1": {
    "body": [
      "assertRaisesRegexp(${1:exception}, ${2:regexp})"
    ],
    "description": "assertRaisesRegexp",
    "prefix": "oo_assertRaisesRegexp"
  },
  "assertRegexpMatches": {
    "body": [
      "assertRegexpMatches(${1:text}, ${2:regexp}${4:, ${3:msg=None}})"
    ],
    "description": "assertRegexpMatches",
    "prefix": "oo_assertRegexpMatches"
  },
  "assertSequenceEqual": {
    "body": [
      "assertSequenceEqual(${1:seq1}, ${2:seq2}${4:, ${3:msg=None}}${6:, ${5:seq_type=None}})"
    ],
    "description": "assertSequenceEqual",
    "prefix": "oo_assertSequenceEqual"
  },
  "assertSetEqual": {
    "body": [
      "assertSetEqual(${1:set1}, ${2:set2}${4:, ${3:msg=None}})"
    ],
    "description": "assertSetEqual",
    "prefix": "oo_assertSetEqual"
  },
  "assertTrue": {
    "body": [
      "assertTrue(${1:expr}${3:, ${2:msg=None}})"
    ],
    "description": "assertTrue",
    "prefix": "oo_assertTrue"
  },
  "assertTupleEqual": {
    "body": [
      "assertTupleEqual(${1:tuple1}, ${2:tuple2}${4:, ${3:msg=None}})"
    ],
    "description": "assertTupleEqual",
    "prefix": "oo_assertTupleEqual"
  },
  "attr/_auto": {
    "body": [
      "_auto = ${1:False}${0}"
    ],
    "description": "Adds the _auto attribute",
    "prefix": "oo_attr/_auto"
  },
  "attr/_inherit": {
    "body": [
      "_inherit = ['${1:ir.model}'${2}]${0}"
    ],
    "description": "Model attribute _inherit with a module list",
    "prefix": "oo_attr/_inherit"
  },
  "attr/_inherits": {
    "body": [
      "_inherits = {'${1:model_name}': '${2:related_id}'}${0}"
    ],
    "description": "Model attribute _inherits and single parent field",
    "prefix": "oo_attr/_inherits"
  },
  "auto_join": {
    "body": [
      "auto_join=${1:False}${0}"
    ],
    "description": "Field attribute: auto_join",
    "prefix": "oo_auto_join"
  },
  "comodel_name": {
    "body": [
      "comodel_name='${1:model_name}'${0}"
    ],
    "description": "Field attribute: comodel_name",
    "prefix": "oo_comodel_name"
  },
  "company_dependent": {
    "body": [
      "company_dependent=${1:True}${0}"
    ],
    "description": "Field attribute: company_dependent",
    "prefix": "oo_company_dependent"
  },
  "compute": {
    "body": [
      "\tcompute='_compute_${1:field}' )",
      "@api.depends('${2:depends}')",
      "def _compute_${1:field}(self):",
      "\tfor record in self:",
      "\t\t${4:record.${1:field} = ${3:something}}",
      "${0}"
    ],
    "description": "Field attribute: compute",
    "prefix": "oo_compute"
  },
  "compute_sudo": {
    "body": [
      "compute_sudo=${1:True}${0}"
    ],
    "description": "Field attribute: compute_sudo",
    "prefix": "oo_compute_sudo"
  },
  "constraints": {
    "body": [
      "_sql_constraints = [",
      "\t(",
      "\t\t'${1:name}',",
      "\t\t'${2:constraint}',",
      "\t\t_('${3:message}')",
      "\t)${4}",
      "]${0}"
    ],
    "description": "Model SQL contraints",
    "prefix": "oo_constraints"
  },
  "constraints1": {
    "body": [
      "@api.constrains('${1}')",
      "def _check_${1}(self):",
      "\tfor record in self:",
      "\t\t${0}"
    ],
    "description": "Model Python contraints",
    "prefix": "oo_constraints"
  },
  "context": {
    "body": [
      "context=\\{${13}\\}${0}"
    ],
    "description": "Field attribute: context",
    "prefix": "oo_context"
  },
  "controller/controller": {
    "body": [
      "class ${1:ControllerName}(Controller):",
      "\t\"\"\" ${2:The summary line for a class docstring should fit on one line.}",
      "\t\tRoutes:",
      "\t\t  /${3:some_url}: ${4:url description}",
      "\t\"\"\"",
      "\t@route('/${3}', type='${5:http}', auth='${6:none}')",
      "\tdef ${3/((^[A-Z])|([^a-zA-Z]))/${2:/downcase}${3:_}/g}(self${7:, **kw}):",
      "\t\tpass${0}"
    ],
    "description": "Odoo web controller class",
    "prefix": "oo_controller/controller"
  },
  "controller/route": {
    "body": [
      "\"\"\" ",
      "\tRoutes:",
      "\t  /${1:some_url}: ${2:url description}",
      "\"\"\"",
      "@route('/${1}', type='${3:http}', auth='${4:none}')",
      "def ${1/((^[A-Z])|([^a-zA-Z]))/${2:/downcase}${3:_}/g}(self${5:, **kw}):",
      "\tpass${0}"
    ],
    "description": "Odoo web controller route",
    "prefix": "oo_controller/route"
  },
  "copy": {
    "body": [
      "copy=${1:False}${0}"
    ],
    "description": "Field attribute: copy",
    "prefix": "oo_copy"
  },
  "copyright": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "###############################################################################",
      "#",
      "#\tjeffery CHEN fan<jeffery9@gmail.com>",
      "#",
      "#\tCopyright (c) All rights reserved:",
      "#\t\t(c) 2017  $TM_FULLNAME",
      "#",
      "#\tThis program is free software: you can redistribute it and/or modify",
      "#\tit under the terms of the GNU Affero General Public License as",
      "#\tpublished by the Free Software Foundation, either version 3 of the",
      "#\tLicense, or (at your option) any later version.",
      "#",
      "#\tThis program is distributed in the hope that it will be useful,",
      "#\tbut WITHOUT ANY WARRANTY; without even the implied warranty of",
      "#\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
      "#\tGNU Affero General Public License for more details.",
      "#",
      "#\tYou should have received a copy of the GNU Affero General Public License",
      "#\talong with this program.  If not, see http://www.gnu.org/licenses",
      "#\t",
      "#\tOdoo and OpenERP is trademark of Odoo S.A.",
      "#",
      "###############################################################################${0}"
    ],
    "description": "Copyright statement Full",
    "prefix": "oo_copyright"
  },
  "copyright2": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "###############################################################################",
      "#",
      "#\tjeffery CHEN fan<jeffery9@gmail.com>",
      "#",
      "#\tCopyright (c) All rights reserved:",
      "#\t\t(c) 2017  $TM_FULLNAME",
      "#",
      "#\tThis program is free software: you can redistribute it and/or modify",
      "#\tit under the terms of the GNU Affero General Public License as",
      "#\tpublished by the Free Software Foundation, either version 3 of the",
      "#\tLicense, or (at your option) any later version.",
      "#",
      "#\tThis program is distributed in the hope that it will be useful,",
      "#\tbut WITHOUT ANY WARRANTY; without even the implied warranty of",
      "#\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
      "#\tGNU Affero General Public License for more details.",
      "#",
      "#\tYou should have received a copy of the GNU Affero General Public License",
      "#\talong with this program.  If not, see http://www.gnu.org/licenses",
      "#\t",
      "#\tOdoo and OpenERP is trademark of Odoo S.A.",
      "#",
      "###############################################################################${0}"
    ],
    "description": "Copyright statement Full",
    "prefix": "oo_copyright"
  },
  "def/log": {
    "body": [
      "def _log(self, level, msg_format, *args, **kwargs):",
      "\t\"\"\" Outputs an formated string in log",
      "\t\t:param level (int): 1=> debug, 2=> info, 3=> warning, 4=> error",
      "\t\t:param message (basestring): name of the message",
      "\t\"\"\"",
      "\tmethods = ['debug', 'info', 'warning', 'error']",
      "\tlog = getattr(_logger, methods[level])",
      "\tmsg = msg_format.format(*args, **kwargs)",
      "\tlog(msg)"
    ],
    "description": "Common logging log method",
    "prefix": "oo_def/log"
  },
  "default": {
    "body": [
      "default='_default_${1:field}'${0}"
    ],
    "description": "Field attribute: search, lambda function",
    "prefix": "oo_default"
  },
  "default company": {
    "body": [
      "default=lambda self: self.env.user.company_id${0}"
    ],
    "description": "Field attribute: default company",
    "prefix": "oo_default company"
  },
  "default user": {
    "body": [
      "default=lambda self: self.env.user${0}"
    ],
    "description": "Field attribute: default user",
    "prefix": "oo_default user"
  },
  "default_model": {
    "body": [
      "default_model='${1:model.name}'${0}"
    ],
    "description": "Field attribute: default_model ",
    "prefix": "oo_default_model"
  },
  "digits": {
    "body": [
      "digits=(${1:16}, ${2:2})"
    ],
    "description": "Field attribute: digits",
    "prefix": "oo_digits"
  },
  "digits/get_precision": {
    "body": [
      "digits=dp.get_precision('Product Price')"
    ],
    "description": "Field attribute: digits",
    "prefix": "oo_digits/get_precision"
  },
  "domain": {
    "body": [
      "domain=[('${1}','${2|=,in,not in|',${3})]${0}"
    ],
    "description": "Field attribute: domain",
    "prefix": "oo_domain"
  },
  "domain1": {
    "body": [
      "domain=lambda self: self._get_${1:field}_domain}()"
    ],
    "description": "Field attribute: domain lambda",
    "prefix": "oo_domain"
  },
  "fail": {
    "body": [
      "fail(${1:msg=None})"
    ],
    "description": "fail",
    "prefix": "oo_fail"
  },
  "feature/company_plant": {
    "body": [
      "plant_id = fields.Many2one(",
      "\tstring='Plant',",
      "\tcomodel_name='res.company',",
      "\trequired=True,",
      "\tdefault=lambda self: self.env.user.company_id,",
      "\tdomain=lambda self: [('is_plant','=',True), ('id','in',self.env.user.company_ids.ids)],",
      ")",
      "company_id = fields.Many2one(",
      "\tstring='Company',",
      "\tcomodel_name='res.company',",
      "\tondelete='set null',",
      "\trelated='factory_id.parent_id',",
      ")"
    ],
    "description": "Adds the company/plant support",
    "prefix": "oo_feature/company_plant"
  },
  "feature/mail_thread": {
    "body": [
      "_inherit = ['mail.thread', 'mail.activity.mixin'${0}]"
    ],
    "description": "Adds Mail Thread support",
    "prefix": "oo_feature/mail_thread"
  },
  "feature/multi_company": {
    "body": [
      "company_ids = fields.Many2many(",
      "\tcomodel_name='res.company', ",
      "\tstring=\"Companies\"\t\t",
      ")",
      "company_id = fields.Many2one(",
      "\tcomodel_name='res.company', ",
      "\tcompute=\"_compute_company_id\", ",
      "\tstore=True,",
      ")",
      "@api.multi",
      "@api.depends('company_ids')",
      "def _compute_company_id(self):",
      "\tfor record in self:",
      "\t\trecord.company_id = record.company_ids[:1]"
    ],
    "description": "Adds the multi company support",
    "prefix": "oo_feature/multi_company"
  },
  "feature/needaction": {
    "body": [
      "'ir.needaction_mixin'${0}"
    ],
    "description": "Adds NeedAction support",
    "prefix": "oo_feature/needaction"
  },
  "feature/parent_child": {
    "body": [
      "_parent_store = ${1:True}",
      "${0}",
      "parent_left = fields.Integer('Left Parent', index=1)",
      "parent_right = fields.Integer('Right Parent', index=1)"
    ],
    "description": "Adds the _parent_store attribute and parent_left and parent_right",
    "prefix": "oo_feature/parent_child"
  },
  "feature/status": {
    "body": [
      "state = fields.Selection(",
      "\tstring='State',",
      "\tselection=[('draft', 'Draft'), ('confirmed', 'Confirmed'),  ('close', 'Close'),  ('cancel', 'Cancel')],",
      "\tdefault='draft',",
      "\treadonly=True,",
      ")",
      "@api.multi",
      "def action_confirm(self):",
      "\tself.write({'state': 'confirmed'})",
      "@api.multi",
      "def action_draft(self):",
      "\tself.write({'state': 'draft'})",
      "@api.multi",
      "def action_cancel(self):",
      "\tself.write({'state': 'cancel'})",
      "@api.multi",
      "def action_close(self):",
      "\tself.write({'state': 'close'})",
      "${0}"
    ],
    "description": "Adds state support",
    "prefix": "oo_feature/status"
  },
  "feature/utm": {
    "body": [
      "'utm.mixin'${0}"
    ],
    "description": "Adds utm support",
    "prefix": "oo_feature/utm"
  },
  "fields.simple": {
    "body": [
      "${1:field_name} = fields.${9|Attachment,Binary,Boolean,Char,Date,Datetime,Float,Html,Image,Integer,Monetary,Text|}(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.simple"
  },
  "fields.relation": {
    "body": [
      "${1:field_name} = fields.${9|Many2one,Many2many,One2many,Reference|}(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.relation"
  },
  "field.company_id": {
    "body": [
      "company_id = fields.Many2one(",
      "\tstring='Company', ",
      "\tcomodel_name='res.company', ",
      "\trequired=True, ",
      "\tdefault=lambda self: self.env.user.company_id",
      ")"
    ],
    "description": "",
    "prefix": "oo_field.company_id"
  },
  "fields.Attachment": {
    "body": [
      "${1:attachment} = fields.Binary(string='${3:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}', attachment=True)"
    ],
    "description": "",
    "prefix": "oo_fields.Attachment"
  },
  "fields.Binary": {
    "body": [
      "${1:field_name} = fields.Binary(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Binary"
  },
  "fields.Boolean": {
    "body": [
      "${1:field_name} = fields.Boolean(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Boolean"
  },
  "fields.Char": {
    "body": [
      "${1:field_name} = fields.Char(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Char"
  },
  "fields.Date": {
    "body": [
      "${1:field_name} = fields.Date(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tdefault=${6:fields.Date.context_today},",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Date"
  },
  "fields.Datetime": {
    "body": [
      "${1:field_name} = fields.Datetime(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tdefault=${6:fields.Datetime.now},",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Datetime"
  },
  "fields.Float": {
    "body": [
      "${1:field_name} = fields.Float(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Float"
  },
  "fields.Html": {
    "body": [
      "${1:field_name} = fields.Html(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Html"
  },
  "fields.Integer": {
    "body": [
      "${1:field_name} = fields.Integer(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Integer"
  },
  "fields.Many2many": {
    "body": [
      "${1:field_name}_ids = fields.Many2many(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tcomodel_name='${8:model.name}',",
      "\trelation='${10:${8/\\./_/g}_${9:this_model}_rel}',",
      "\tcolumn1='${11:${9/\\./_/g}_id}',",
      "\tcolumn2='${12:${8/\\./_/g}_id}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Many2many"
  },
  "fields.Many2one": {
    "body": [
      "${1:field_name}_id = fields.Many2one(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tcomodel_name='${8:model.name}',",
      "\tondelete='${11:restrict}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Many2one"
  },
  "fields.One2many": {
    "body": [
      "${1:field_name}_ids = fields.One2many(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tcomodel_name='${8:model.name}',",
      "\tinverse_name='${9:inverse_field}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.One2many"
  },
  "fields.Reference": {
    "body": [
      "${1:field_name}_ref = fields.Reference(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tselection=[('${8:model.name}', '${9:String}'),('${10:model.name}', '${11:String}')]",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Reference"
  },
  "fields.Selection": {
    "body": [
      "${1:field_name} = fields.Selection(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      "\tselection=[('${8:valor1}', '${9:${8/(.)(.+)/${1:/downcase}$2/g}}'), ('${10:valor2}', '${11:${10/(.)(.+)/${1:/downcase}$2/g}}')]",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Selection"
  },
  "fields.Text": {
    "body": [
      "${1:field_name} = fields.Text(",
      "\tstring='${2:${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g}}',",
      ")${0}"
    ],
    "description": "",
    "prefix": "oo_fields.Text"
  },
  "file/__init__": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "from . import ${1:models}${0}"
    ],
    "description": "__init__ file",
    "prefix": "oo_file/__init__"
  },
  "file/__manifest__": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "{",
      "\t'name': '${1:Name}',",
      "\t'version': '1.0',",
      "\t'description': \"\"\"",
      "${0}",
      "\t\"\"\",",
      "\t'author': '${2:Author}',",
      "\t'website': 'http://www.github.com/${3}',",
      "\t'license': 'AGPL-3',",
      "\t'category': 'Uncategorized',",
      "\t'depends': [",
      "\t\t'base'",
      "\t],",
      "\t'external_dependencies': {},",
      "\t'data': [],",
      "\t'demo': [],",
      "\t'js': [],",
      "\t'css': [],",
      "\t'qweb': [],",
      "\t'images': [],",
      "\t'test': [],",
      "\t\"installable\": True,",
      "\t\"application\": True,",
      "\t\"auto_install\": False,",
      "}"
    ],
    "description": "Odoo manifest file common structure",
    "prefix": "oo_file/__manifest__"
  },
  "file/coding": {
    "body": [ "# -*- coding: utf-8 -*-${0}" ],
    "description": "utf-8 coding",
    "prefix": "oo_file/coding"
  },
  "file/controller": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "from odoo.http import Controller, request, route, _",
      "from odoo.exceptions import UserError, ValidationError${0}"
    ],
    "description": "Odoo web controller file",
    "prefix": "oo_file/controller"
  },
  "file/model": {
    "body": [
      "# -*- coding: utf-8 -*-",
      "from odoo import api, fields, models, _",
      "from odoo.exceptions import UserError, ValidationError",
      "\n\n${0}"
    ],
    "description": "Odoo model file",
    "prefix": "oo_file/model"
  },
  "help": {
    "body": [
      "help='${1:Technical Field }'${0}"
    ],
    "description": "Field attribute: help",
    "prefix": "oo_help"
  },
  "import/datetime": {
    "body": [
      "from datetime import date, datetime",
      "from dateutil.relativedelta import relativedelta",
      "from odoo.tools import DEFAULT_SERVER_DATE_FORMAT as DATE_FORMAT",
      "from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT as DATETIME_FORMAT",
      "${0}"
    ],
    "description": "import date and time tools",
    "prefix": "oo_import/datetime"
  },
  "import/dp": {
    "body": [
      "import odoo.addons.decimal_precision as dp",
      "${0}"
    ],
    "description": "",
    "prefix": "oo_import/dp"
  },
  "import/exceptions": {
    "body": [
      "from odoo.exceptions import UserError, ValidationError",
      "${0}"
    ],
    "description": "",
    "prefix": "oo_import/exceptions"
  },
  "import/logging": {
    "body": [
      "import logging",
      "_logger = logging.getLogger(__name__)",
      "${0}"
    ],
    "description": "logging instance",
    "prefix": "oo_import/logging"
  },
  "import/translate": {
    "body": [
      "from odoo.tools.translate import _${0}"
    ],
    "description": "import odoo translate",
    "prefix": "oo_import/translate"
  },
  "index": {
    "body": [
      "index=${1:True}${0}"
    ],
    "description": "Field attribute: index",
    "prefix": "oo_index"
  },
  "inverse": {
    "body": [
      "inverse='_inverse_${1:field}'${0}"
    ],
    "description": "Field attribute: inverse, lambda function",
    "prefix": "oo_inverse"
  },
  "limit": {
    "body": [
      "limit=${1:80}${0}"
    ],
    "description": "Field attribute: limit",
    "prefix": "oo_limit"
  },
  "method/_browse": {
    "body": [
      "@classmethod",
      "def _browse(cls, env, ids):",
      "\t\"\"\" Returns a recordset for the ids provided as parameter in the current",
      "\t\tenvironment.",
      "\t\tCan take no ids, a single id or a sequence of ids.",
      "\t\t:param cls: model class",
      "\t\t:param env: environment",
      "\t\t:param ids: none, a single id or a sequence of ids",
      "\t\t:return: a recordset",
      "\t\"\"\"",
      "\tresult = ${1:class_name}._browse(env, ids)",
      "\t${0}",
      "\treturn result"
    ],
    "description": "_browse method signature",
    "prefix": "oo_method/_browse"
  },
  "method/_onchange": {
    "body": [
      "@api.onchange('${1:field}')",
      "def _onchange_${1}(self):",
      "\t${3:self.${2:field} = self.${1}}",
      "${0}"
    ],
    "description": "_onchange method signature, code",
    "prefix": "oo_method/_onchange"
  },
  "method/_onchange1": {
    "body": [
      "@api.onchange('${1:field_name}')",
      "def _onchange_${1}(self):",
      "\treturn {",
      "\t\t'domain': {",
      "\t\t\t'${2:field_name}': ${6:[('${3:field_name}', '${4:=}', ${5:self.${1}})]}",
      "\t\t}",
      "\t}${0}"
    ],
    "description": "_onchange method signature, domain",
    "prefix": "oo_method/_onchange"
  },
  "method/_onchange2": {
    "body": [
      "@api.onchange('${1:field}')",
      "def _onchange_${1}(self):",
      "\treturn {",
      "\t\t'warning': {",
      "\t\t\t'title': '${2:Text of the title}',",
      "\t\t\t'message': '${3:Text of the message}'",
      "\t\t}",
      "\t}${0}"
    ],
    "description": "_onchange method signature, warning",
    "prefix": "oo_method/_onchange"
  },
  "method/_search": {
    "body": [
      "def _search_${1: field}(self, operator, value):",
      "\treturn [('${2:related}', operator, value)]${0}"
    ],
    "description": "_search method signature",
    "prefix": "oo_method/_search"
  },
  "method/action_confirm": {
    "body": [
      "@api.multi",
      "def action_confirm(self):",
      "\tfor record in self:",
      "\t\trecord.write( { '${1:field}': '${2:value}'})",
      "\treturn True",
      "${0}"
    ],
    "description": "action_confirm method signature",
    "prefix": "oo_method/action_confirm"
  },
  "method/compute": {
    "body": [
      "@api.depends('${2:depends}')",
      "def _compute_${1:field}(self):",
      "\tfor record in self:",
      "\t\t${4:record.${1:field} = ${3:something}}",
      "${0}"
    ],
    "description": "_compute method signature",
    "prefix": "oo_method/compute"
  },
  "method/copy": {
    "body": [
      "@api.multi",
      "def copy(self, default=None):",
      "\t\"\"\"",
      "\t\tCreate a new record in ${1:ModelName} model from existing one",
      "\t\t@param default: dict which contains the values to be override during",
      "\t\tcopy of object",
      "\t\t@return: returns a id of newly created record",
      "\t\"\"\"",
      "\tresult = super(${1:ModelName}, self).copy(default)",
      "\t${0}",
      "\treturn result"
    ],
    "description": "copy method signature",
    "prefix": "oo_method/copy"
  },
  "method/create": {
    "body": [
      "@api.model",
      "def create(self, values):",
      "\t\"\"\"",
      "\t\tCreate a new record for a model ${1:ModelName}",
      "\t\t@param values: provides a data for new record",
      "\t\t@return: returns a id of new record",
      "\t\"\"\"",
      "\tresult = super(${1:Model_Name}, self).create(values)${0}",
      "\treturn result"
    ],
    "description": "create method signature",
    "prefix": "oo_method/create"
  },
  "method/default_get": {
    "body": [
      "@api.model",
      "def default_get(self, fields):",
      "\tres = super(${1:ModelClass}, self).default_get(fields)",
      "\t${0}",
      "\treturn res",
      "\t"
    ],
    "description": "default_get method signature",
    "prefix": "oo_method/default_get"
  },
  "method/fields_get": {
    "body": [
      "@api.model",
      "def fields_get(self, allfields=None, attributes=None):",
      "\tfields_to_hide = []",
      "\tfor fname, field in self._fields.items():",
      "\t\tif fname.startswith('${2:prefix}'):",
      "\t\t\tfields_to_hide.append(fname)",
      "\tres = super(${1:Model}, self).fields_get(allfields, attributes)",
      "\tfor field in fields_to_hide:",
      "\t\tres[field]['searchable'] = False",
      "\t\tres[field]['sortable'] = False",
      "\treturn res",
      "${0}"
    ],
    "description": "fields_get remove fields from search and groubby",
    "prefix": "oo_method/fields_get"
  },
  "method/get_empty_list_help": {
    "body": [
      "@api.model",
      "def get_empty_list_help(self, help):",
      "\t\"\"\" Generic method giving the help message displayed when having",
      "\t\tno result to display in a list or kanban view.",
      "\t\"\"\"",
      "\t${0:return help}"
    ],
    "description": "get_empty_list_help method signature",
    "prefix": "oo_method/get_empty_list_help"
  },
  "method/get_formview_id": {
    "body": [
      "@api.one",
      "@api.returns('ir.ui.view')",
      "def get_formview_id(self):",
      "\t\"\"\" Return an view id to open the document with.",
      "\t\t:param int id: id of the document to open",
      "\t\"\"\"",
      "\t${0:return False}"
    ],
    "description": "get_formview_id method signature",
    "prefix": "oo_method/get_formview_id"
  },
  "method/init": {
    "body": [
      "def init(self):",
      "\t\"\"\" Build database view which will be used as module origin",
      "\t\"\"\"",
      "\tself._sql_query = \"\"\"",
      "\t\tSELECT",
      "\t\t\tROW_NUMBER() OVER() AS \"id\"",
      "\t\"\"\"",
      "\ttools.drop_view_if_exists(self._cr, ${1:self._table})",
      "\tself._cr.execute(",
      "\t\t'create or replace view {} as ({})'.format(",
      "\t\t\t${1},",
      "\t\t\tself._sql_query",
      "\t\t)",
      "\t)${0}"
    ],
    "description": "init method signature",
    "prefix": "oo_method/init"
  },
  "method/name_get": {
    "body": [
      "@api.multi",
      "@api.depends('name', '${1:ref}')",
      "def name_get(self):",
      "\tresult = []",
      "\tfor record in self:",
      "\t\tif record.${1:ref}:",
      "\t\t\tname = '[' + record.${1:ref} + '] ' + record.name",
      "\t\telse:",
      "\t\t\tname = record.name",
      "\t\tresult.append((record.id, name))",
      "\treturn result",
      "${0}"
    ],
    "description": "name_get method signature",
    "prefix": "oo_method/name_get"
  },
  "method/name_search": {
    "body": [
      "@api.model",
      "def name_search(self, name, args=None, operator='ilike', limit=100):",
      "\targs = args or []",
      "\tdomain = []",
      "\tif name:",
      "\t\tdomain = [",
      "\t\t\t'|', ('${1:field_name}', '=ilike', name), ('${2:field_name}', operator, name)",
      "\t\t]",
      "\t\tif operator in expression.NEGATIVE_TERM_OPERATORS:",
      "\t\t\tdomain = ['&', '!'] + domain[1:]",
      "\trecords = self.search(domain + args, limit=limit)",
      "\treturn records.name_get()",
      "${0}"
    ],
    "description": "name_search method signature",
    "prefix": "oo_method/name_search"
  },
  "method/toggle_active": {
    "body": [
      "@api.multi",
      "def toggle_active(self):",
      "\treturn {'warning': {",
      "\t\t\t\t\t'title': _(\"Warning\"),",
      "\t\t\t\t\t'message': _(u\"It is not allowed to \"archive\" records of this model!\") ,",
      "\t}}",
      "${0}"
    ],
    "description": "toggle_active method signature",
    "prefix": "oo_method/toggle_active"
  },
  "method/unlink": {
    "body": [
      "@api.multi",
      "def unlink(self):",
      "\t\"\"\"",
      "\t\tDelete all record(s) from recordset",
      "\t\treturn True on success, False otherwise",
      "\t\t@return: True on success, False otherwise",
      "\t\t#TODO: process before delete resource",
      "\t\"\"\"",
      "\tresult = super(${1:ModelName}, self).unlink()${0}",
      "\treturn result"
    ],
    "description": "unlink method signature",
    "prefix": "oo_method/unlink"
  },
  "method/unlink_restrict": {
    "body": [
      "@api.multi",
      "def unlink(self):",
      "\tfor record in self:",
      "\t\tif record.state not in ('draft'):",
      "\t\t\traise UserError(",
      "\t\t\t\t'You cannot delete a document which is not draft or cancelled!'",
      "\t\t\t)",
      "\treturn super(ModelClass, self).unlink()"
    ],
    "description": "restrict unlink",
    "prefix": "oo_method/unlink_restrict"
  },
  "method/view_header_get": {
    "body": [
      "@api.model",
      "def view_header_get(self, view_id=None, view_type='form'):",
      "\t\"\"\" Returns the window title which depends on the context \"\"\"",
      "\t${0:return False}"
    ],
    "description": "view_header_get method signature",
    "prefix": "oo_method/view_header_get"
  },
  "method/view_init": {
    "body": [
      "@api.model",
      "def view_init(self, fields_list):",
      "\t\"\"\" Does specific things when a view on the object is opened \"\"\"",
      "\t${0:pass}"
    ],
    "description": "view_init method signature",
    "prefix": "oo_method/view_init"
  },
  "method/write": {
    "body": [
      "@api.multi",
      "def write(self, values):",
      "\t\"\"\"",
      "\t\tUpdate all record(s) in recordset, with new value comes as {values}",
      "\t\treturn True on success, False otherwise",
      "\t\t@param values: dict of new values to be set",
      "\t\t@return: True on success, False otherwise",
      "\t\"\"\"",
      "\tresult = super(${1:Model_Name}, self).write(values)${0}",
      "\treturn result"
    ],
    "description": "write method signature",
    "prefix": "oo_method/write"
  },
  "model/model": {
    "body": [
      "class ${1:ModelName}(models.${2:Model}):",
      "\t######################",
      "\t# Private attributes #",
      "\t######################",
      "\t_${3:name} = \"${4:model_name}\"\n",
      "\t###################",
      "\t# Default methods #",
      "\t###################\n",
      "\t######################",
      "\t# Fields declaration #",
      "\t######################",
      "\t${5}",
      "\t#######################################",
      "\t# Compute, inverse and search methods #",
      "\t#######################################\n",
      "\t#######################################",
      "\t# Selection methods #",
      "\t#######################################\n",
      "\t############################",
      "\t# Constrains and onchanges methods #",
      "\t############################\n",
      "\t#########################",
      "\t# CRUD method overrides #",
      "\t#########################\n",
      "\t##################",
      "\t# Action methods #",
      "\t##################\n",
      "\t####################",
      "\t# Business methods #",
      "\t####################"
    ],
    "description": "Odoo generic model class",
    "prefix": "oo_model/model"
  },
  "ondelete": {
    "body": [
      "ondelete='${1:set null}'${0}"
    ],
    "description": "Field attribute: ondelete",
    "prefix": "oo_ondelete"
  },
  "oodict/stock_move/~12": {
    "body": [
      "{",
      "\t'name': self.name,",
      "\t'product_id': self.product_id.id,",
      "\t'product_uom': self.product_uom.id or",
      "\tself.product_id.uom_id.id,",
      "\t'product_uom_qty': self.product_qty,",
      "\t'partner_id': self.partner_id and",
      "\tself.partner_id.id or False,",
      "\t'location_id': self.location_dest_id.id,",
      "\t'location_dest_id': self.location_dest_id.id,",
      "\t'move_line_ids': [(0, 0, {",
      "\t\t'product_id': self.product_id.id,",
      "\t\t'lot_id': self.lot_id.id,",
      "\t\t'product_uom_qty': self.product_qty,",
      "\t\t'product_uom_id': self.product_uom.id or",
      "\t\tself.product_id.uom_id.id,",
      "\t\t'qty_done': self.product_qty,",
      "\t\t'package_id': False,",
      "\t\t'result_package_id': False,",
      "\t\t'location_id': self.location_dest_id.id,",
      "\t\t'location_dest_id': self.location_dest_id.id})]}",
      "${0}"
    ],
    "description": "",
    "prefix": "oo_oodict/stock_move/~12"
  },
  "readonly": {
    "body": [
      "readonly=True${0} "
    ],
    "description": "Field attribute: readonly",
    "prefix": "oo_readonly"
  },
  "readonly/states": {
    "body": [
      "readonly=True, states={'draft': [('readonly', False)]}${0} "
    ],
    "description": "Field attribute: readonly states",
    "prefix": "oo_readonly/states"
  },
  "related": {
    "body": [
      "related='${1:field_name}',",
      "readonly=True,",
      "store=True${0}"
    ],
    "description": "Field attribute: related",
    "prefix": "oo_related"
  },
  "related_sudo": {
    "body": [
      "related_sudo=${1:False}${0}"
    ],
    "description": "Field attribute: related_sudo",
    "prefix": "oo_related_sudo"
  },
  "required": {
    "body": [
      "required=${1:True}${0}"
    ],
    "description": "Field attribute: required",
    "prefix": "oo_required"
  },
  "return/act_window": {
    "body": [
      "return {",
      "\t'name': _('${1: Human Readable String}'),",
      "\t'type': 'ir.actions.act_window',",
      "\t'view_type': 'form',",
      "\t'view_mode': 'tree,form',",
      "\t'res_model': '${2:model}',",
      "\t'domain': [('id', 'in', ${3:ids})],",
      "}${0}"
    ],
    "description": "pop window",
    "prefix": "oo_return/act_window"
  },
  "return/act_window_close": {
    "body": [
      "return {'type': 'ir.actions.act_window_close'${0}"
    ],
    "description": "close window",
    "prefix": "oo_return/act_window_close"
  },
  "selection_add": {
    "body": [
      "selection_add=[('${1:draft}', ${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g})${0}]"
    ],
    "description": "Field attribute: selection_add ",
    "prefix": "oo_selection_add"
  },
  "selection_element": {
    "body": [
      "('${1:draft}', ${1/(.*?)_([a-zA-Z])/${1:/capitalize} ${2:/capitalize}/g})${0}"
    ],
    "description": "Field attribute: selection add new element ",
    "prefix": "oo_selection_element"
  },
  "sequence/line_number": {
    "body": [
      "line_number = fields.Integer(string='Line Number', default=10)",
      "@api.model",
      "def default_get(self, fields):",
      "\tdefault_values = super(${1:ModelClass}, self).default_get(fields)",
      "\tline_ids = self.env.context.get('${2:line_ids}', False)",
      "\tif line_ids:",
      "\t\tlines = self.env['${3:model}'].resolve_2many_commands(",
      "\t\t\t'${2:line_ids}', line_ids",
      "\t\t)",
      "\t\tlines.sort(key=lambda x:x.get('line_number'))",
      "\t\tif lines:",
      "\t\t\tsequence = lines[-1]['line_number'] + 10",
      "\t\telse:",
      "\t\t\tsequence = 10",
      "\t\tdefault_values.update({'line_number': sequence})",
      "\treturn default_values"
    ],
    "description": "Line Number Add 10 automaticlly",
    "prefix": "oo_sequence/line_number"
  },
  "sequence/next_by_code": {
    "body": [
      "if values.get('name', _('New')) == _('New'):",
      "\tif 'company_id' in values:",
      "\t\tvalues['name'] = self.env['ir.sequence'].with_context(",
      "\t\t\tforce_company=values['company_id']",
      "\t\t).next_by_code('${1:model}') or _('New')",
      "\telse:",
      "\t\tvalues['name'] = self.env['ir.sequence'].next_by_code(",
      "\t\t\t'${1:model}'",
      "\t\t) or _('New')"
    ],
    "description": "next_by_code, used in create()",
    "prefix": "oo_sequence/next_by_code"
  },
  "size": {
    "body": [
      "size=${1:32}${0}"
    ],
    "description": "Field attribute: size",
    "prefix": "oo_size"
  },
  "states": {
    "body": [
      "states={'${1:state}': [${0}]}"
    ],
    "description": "Field attribute: states",
    "prefix": "oo_states"
  },
  "states/invisible": {
    "body": [
      "(invisible, True)${0}"
    ],
    "description": "Field attribute: states state invisible",
    "prefix": "oo_states/invisible"
  },
  "states/readonly": {
    "body": [
      "(readonly, True)${0}"
    ],
    "description": "Field attribute: states state readonly",
    "prefix": "oo_states/readonly"
  },
  "states/required": {
    "body": [
      "(required, True)${0}"
    ],
    "description": "Field attribute: states state required",
    "prefix": "oo_states/required"
  },
  "states/state": {
    "body": [
      "${1:state}': [${0}]"
    ],
    "description": "Field attribute: states state",
    "prefix": "oo_states/state"
  },
  "store": {
    "body": [
      "store=${1:True}${0}"
    ],
    "description": "Field attribute: store",
    "prefix": "oo_store"
  },
  "string": {
    "body": [
      "string='${1}'${0}"
    ],
    "description": "Field attribute: string",
    "prefix": "oo_string"
  },
  "super": {
    "body": [
      "super(${1:ModelClass}, self).${2:handler}(${3})"
    ],
    "description": "Call Python parent class",
    "prefix": "oo_super"
  },
  "test": {
    "body": [
      "def test_${1:item_name}(self):",
      "\t\"\"\" Checks if the ${1} works properly",
      "\t\"\"\"",
      "\t${0:pass}"
    ],
    "description": "Test case method",
    "prefix": "oo_test"
  },
  "track_visibility": {
    "body": [
      "track_visibility='${1:onchange}'${0}"
    ],
    "description": "Field attribute: track_visibility",
    "prefix": "oo_track_visibility"
  },
  "translate": {
    "body": [
      "translate=${1:False}${0}"
    ],
    "description": "Field attribute: translate",
    "prefix": "oo_translate"
  },
  "x2m/create": {
    "body": [
      "(0, False, ${1:{values}})"
    ],
    "description": "x2m create",
    "prefix": "oo_x2m/create"
  },
  "x2m/delete": {
    "body": [
      "(2, ${1:id}, False)"
    ],
    "description": "x2m delete, don't use in create()",
    "prefix": "oo_x2m/delete"
  },
  "x2m/link": {
    "body": [
      "(4, ${1:id}, False)"
    ],
    "description": "x2m link, don't use in One2many",
    "prefix": "oo_x2m/link"
  },
  "x2m/replace": {
    "body": [
      "(6, False, ${1:ids)"
    ],
    "description": "x2m replace, don't use in create() and One2many",
    "prefix": "oo_x2m/replace"
  },
  "x2m/unlink": {
    "body": [
      "(3, ${1:id}, False)"
    ],
    "description": "x2m unlink, don't use in create()",
    "prefix": "oo_x2m/unlink"
  },
  "x2m/unlink_all": {
    "body": [
      "(5, False, False)"
    ],
    "description": "x2m unlink all, don't use in create()",
    "prefix": "oo_x2m/unlink_all"
  },
  "x2m/update": {
    "body": [
      "(1, ${1:id}, ${2:{values}})"
    ],
    "description": "x2m update, don't use in create()",
    "prefix": "oo_x2m/update"
  }
}